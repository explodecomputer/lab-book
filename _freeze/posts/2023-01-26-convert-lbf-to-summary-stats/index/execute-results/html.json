{
  "hash": "9672fcaccd126ad1fd47ef96c45e8efc",
  "result": {
    "markdown": "---\ntitle: \"Convert Bayes factors to beta and standard error\"\nauthor: Gibran Hemani\ndate: \"2023-01-26\"\ncategories: [statistics, fine mapping]\n---\n\n\n## Background\n\nIs it possible to convert BF to beta and standard error? According to [Giambartolomei et al 2014](https://pubmed.ncbi.nlm.nih.gov/24830394/) -\n\n$$\nABF = \\sqrt{1-r} \\times exp(rZ^2/2)\n$$\n\nso\n\n$$\n|Z| = \\sqrt{\\frac{2 * log(ABF) - log(\\sqrt{1-r})}{r}}\n$$\n\nhere $r = W / V$ where V is the variance of the SNP effect estimate\n\n$$\nV \\approx \\frac{1}{2np(1-p)}\n$$\n\nwhere n is sample size and p is allele frequency (assumes small amount of variance explained in trait and sd of trait is 1).\n\nRun simulation \n\n1. Use regional LD matrix to generate summary statistics with a single causal variant\n2. Use SuSiE to perform fine mapping\n3. Convert SuSiE Bayes Factors into Z scores, betas, standard errors\n4. Compare converted Z, beta, se against original simulated Z, beta, SE\n\n\n## Simulation\n\nLibraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(simulateGP)\nlibrary(susieR)\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nhere() starts at /Users/gh13047/repo/lab-book\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n:::\n\n\nConversion function for logBF to z, beta, se\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Convert log Bayes Factor to summary stats\n#'\n#' @param lbf p-vector of log Bayes Factors for each SNP\n#' @param n Overall sample size\n#' @param af p-vector of allele frequencies for each SNP\n#' @param prior_v Variance of prior distribution. SuSiE uses 50\n#'\n#' @return tibble with lbf, af, beta, se, z\nlbf_to_z_cont <- function(lbf, n, af, prior_v=50)\n{\n  se = sqrt(1 / (2 * n * af * (1-af)))\n  r = prior_v / (prior_v + se^2)\n  z = sqrt((2 * lbf - log(sqrt(1-r)))/r)\n  beta <- z * se\n  return(tibble(lbf, af, z, beta, se))\n}\n```\n:::\n\n\nRead in example LD matrix from simulateGP repository\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap <- readRDS(url(\"https://github.com/explodecomputer/simulateGP/raw/master/data/ldobj_5_141345062_141478055.rds\", \"rb\"))\nglimpse(map)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 3\n $ ld  : num [1:501, 1:501] 1 0.565 0.566 0.565 0.565 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:501] \"V2000\" \"V2001\" \"V2002\" \"V2003\" ...\n $ map : tibble [501 × 6] (S3: tbl_df/tbl/data.frame)\n  ..$ chr: int [1:501] 5 5 5 5 5 5 5 5 5 5 ...\n  ..$ snp: chr [1:501] \"rs252141\" \"rs252140\" \"rs252139\" \"rs187544\" ...\n  ..$ pos: int [1:501] 141345062 141345192 141345218 141345361 141345678 141345805 141346830 141347360 141347465 141347931 ...\n  ..$ alt: chr [1:501] \"T\" \"T\" \"C\" \"G\" ...\n  ..$ ref: chr [1:501] \"C\" \"C\" \"T\" \"T\" ...\n  ..$ af : num [1:501] 0.627 0.831 0.83 0.831 0.831 ...\n  ..- attr(*, \".internal.selfref\")=<externalptr> \n $ nref: num 503\n```\n:::\n:::\n\n\nGenerate summary statistics for a single causal variant and \n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nss <- map$map %>%\n    generate_gwas_params(h2=0.003, Pi=1/nrow(.)) %>%\n    generate_gwas_ss(50000, ld=map$ld)\ntable(ss$beta == 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nFALSE  TRUE \n    1   500 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(-log10(pval) ~ pos, ss)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nRun SuSiE\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsout <- susie_rss(ss$bhat / ss$se, R = map$ld, n = 50000, bhat = ss$bhat, var_y=1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING: XtX is not symmetric; forcing XtX to be symmetric by replacing XtX with (XtX + t(XtX))/2\n```\n:::\n\n```{.r .cell-code}\nsummary(sout)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nVariables in credible sets:\n\n variable variable_prob cs\n      286     0.1604616  1\n      306     0.1604616  1\n      291     0.1604616  1\n      300     0.1604616  1\n      274     0.1604616  1\n      284     0.1604616  1\n\nCredible sets summary:\n\n cs cs_log10bf cs_avg_r2 cs_min_r2                variable\n  1   30.37357         1         1 274,284,286,291,300,306\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(sout)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 18\n $ alpha                 : num [1:10, 1:501] 6.9e-35 2.0e-03 2.0e-03 2.0e-03 2.0e-03 ...\n $ mu                    : num [1:10, 1:501] 0.000761 0 0 0 0 ...\n $ mu2                   : num [1:10, 1:501] 2.04e-05 0.00 0.00 0.00 0.00 ...\n $ KL                    : num [1:10] 6.75 -1.24e-14 -1.24e-14 -1.24e-14 -1.24e-14 ...\n $ lbf                   : num [1:10] 6.99e+01 1.24e-14 1.24e-14 1.24e-14 1.24e-14 ...\n $ lbf_variable          : num [1:10, 1:501] -2.51 0 0 0 0 ...\n $ sigma2                : num 1\n $ V                     : num [1:10] 0.00307 0 0 0 0 ...\n $ pi                    : num [1:501] 0.002 0.002 0.002 0.002 0.002 ...\n $ null_index            : num 0\n $ XtXr                  : num [1:501, 1] -0.328 70.558 72.085 70.558 70.558 ...\n $ converged             : logi TRUE\n $ elbo                  : num [1:2] -70876 -70876\n $ niter                 : int 2\n $ X_column_scale_factors: num [1:501] 1 1 1 1 1 1 1 1 1 1 ...\n $ intercept             : num NA\n $ sets                  :List of 5\n  ..$ cs                :List of 1\n  .. ..$ L1: int [1:6] 274 284 286 291 300 306\n  ..$ purity            :'data.frame':\t1 obs. of  3 variables:\n  .. ..$ min.abs.corr   : num 1\n  .. ..$ mean.abs.corr  : num 1\n  .. ..$ median.abs.corr: num 1\n  ..$ cs_index          : int 1\n  ..$ coverage          : num 0.963\n  ..$ requested_coverage: num 0.95\n $ pip                   : num [1:501] 0 0 0 0 0 0 0 0 0 0 ...\n - attr(*, \"class\")= chr \"susie\"\n```\n:::\n:::\n\n\nGet Z scores from lbf\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- lbf_to_z_cont(sout$lbf_variable[1,], 50000, ss$af, prior_v = 50)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 501 × 5\n     lbf     af     z    beta      se\n   <dbl>  <dbl> <dbl>   <dbl>   <dbl>\n 1 -2.51 0.373   1.41 0.00919 0.00654\n 2 -2.43 0.169   1.37 0.0115  0.00844\n 3 -2.37 0.17    1.42 0.0119  0.00842\n 4 -2.43 0.169   1.37 0.0115  0.00844\n 5 -2.43 0.169   1.37 0.0115  0.00844\n 6 -2.52 0.191   1.32 0.0106  0.00805\n 7 -2.43 0.169   1.37 0.0115  0.00844\n 8 -2.44 0.17    1.36 0.0115  0.00842\n 9  2.23 0.0139  3.17 0.0855  0.0270 \n10 -2.43 0.169   1.37 0.0115  0.00844\n# … with 491 more rows\n```\n:::\n:::\n\n\nRelationship between lbf and re-estimated z\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(z ~ lbf, a)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nNew Z vs original Z\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(a$z^2 ~ ss$fval)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(a$z^2 ~ ss$fval)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = a$z^2 ~ ss$fval)\n\nCoefficients:\n(Intercept)      ss$fval  \n     1.5141       0.9834  \n```\n:::\n:::\n\n\nNew beta vs original beta\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(a$beta ~ ss$bhat)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nTwo causal variants\n\nSet two causal variants at either end of the region\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(12)\nparam <- map$map\nparam$beta <- 0\nparam$beta[c(10, 490)] <- 0.3\nss <- generate_gwas_ss(param, 50000, ld=map$ld)\nplot(-log10(pval) ~ pos, ss)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nFirst variant\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsout <- susie_rss(ss$bhat / ss$se, R = map$ld, n = 50000, bhat = ss$bhat, var_y=1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING: XtX is not symmetric; forcing XtX to be symmetric by replacing XtX with (XtX + t(XtX))/2\n```\n:::\n\n```{.r .cell-code}\na1 <- lbf_to_z_cont(sout$lbf_variable[1,], 50000, ss$af, prior_v = 50)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in sqrt((2 * lbf - log(sqrt(1 - r)))/r): NaNs produced\n```\n:::\n\n```{.r .cell-code}\nplot(a1$beta ~ ss$bhat)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\na2 <- lbf_to_z_cont(sout$lbf_variable[2,], 50000, ss$af, prior_v = 50)\nplot(a2$beta ~ ss$bhat)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nThis looks good - it's setting different values to 0 in the two lbf vectors that correspond to two causal variants\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.1 Patched (2022-09-06 r82817)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Monterey 12.6.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.0.10     here_1.0.1       susieR_0.12.27   simulateGP_0.1.2\n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.9         plyr_1.8.7         compiler_4.2.1     pillar_1.8.1      \n [5] tools_4.2.1        digest_0.6.31      jsonlite_1.8.4     evaluate_0.19     \n [9] lifecycle_1.0.3    tibble_3.1.8       gtable_0.3.1       lattice_0.20-45   \n[13] pkgconfig_2.0.3    rlang_1.0.6        Matrix_1.4-1       DBI_1.1.3         \n[17] cli_3.5.0          yaml_2.3.6         xfun_0.36          fastmap_1.1.0     \n[21] stringr_1.5.0      knitr_1.41         generics_0.1.3     vctrs_0.5.1       \n[25] htmlwidgets_1.5.4  rprojroot_2.0.3    tidyselect_1.2.0   grid_4.2.1        \n[29] reshape_0.8.9      glue_1.6.2         R6_2.5.1           fansi_1.0.3       \n[33] rmarkdown_2.16     mixsqp_0.3-48      irlba_2.3.5.1      ggplot2_3.4.0     \n[37] magrittr_2.0.3     MASS_7.3-58.1      matrixStats_0.63.0 scales_1.2.1      \n[41] htmltools_0.5.4    assertthat_0.2.1   colorspace_2.0-3   utf8_1.2.2        \n[45] stringi_1.7.8      munsell_0.5.0      crayon_1.5.2      \n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}