{
  "hash": "bfc1f67d9bce928d1bf826a3dd302fce",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"MVMR collider\"\nauthor: Gibran Hemani\ndate: \"2025-07-03\"\ncategories: []\n---\n\n\n## Background\n\nImaging traits are available in non-random samples. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(simulateGP)\nlibrary(TwoSampleMR)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTwoSampleMR version 0.6.16 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n  [>] New authentication requirements: https://mrcieu.github.io/ieugwasr/articles/guide.html#authentication.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n  [>] Major upgrades to our servers completed to improve service and stability.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n  [>] We need your help to shape our emerging roadmap!\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n      Please take 2 minutes to give us feedback -\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n      https://forms.office.com/e/eSr7EFAfCG\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nWarning:\nYou are running an old version of the TwoSampleMR package.\nThis version:   0.6.16\nLatest version: 0.6.17\nPlease consider updating using remotes::install_github('MRCIEU/TwoSampleMR')\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'TwoSampleMR'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:simulateGP':\n\n    allele_frequency, contingency, get_population_allele_frequency\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(janitor)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'janitor'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(furrr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: future\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nn <- 10000\nnsnp <- 100\ng <- make_geno(n, nsnp, 0.5)\ndim(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10000   100\n```\n\n\n:::\n\n```{.r .cell-code}\neffs <- choose_effects(nsnp, 0.5)\n\nbmi <- make_phen(effs, g)\n\ngx <- make_geno(n, nsnp, 0.5)\neffsx <- choose_effects(nsnp, 0.5)\n\nx <- make_phen(effsx, gx)\n\ntest <- rbinom(n, 1, plogis(bmi + x + bmi*x))\n\ntable(test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntest\n   0    1 \n5230 4770 \n```\n\n\n:::\n\n```{.r .cell-code}\ny <- bmi * 0.5 + rnorm(n)\n\nsummary(lm(y ~ x))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y ~ x)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.2328 -0.7536 -0.0026  0.7479  4.6932 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)  \n(Intercept)  0.01519    0.01116   1.360   0.1737  \nx           -0.01911    0.01116  -1.712   0.0869 .\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.116 on 9998 degrees of freedom\nMultiple R-squared:  0.0002931,\tAdjusted R-squared:  0.0001931 \nF-statistic: 2.931 on 1 and 9998 DF,  p-value: 0.08691\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(lm(y[test==1] ~ x[test==1]))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y[test == 1] ~ x[test == 1])\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.9033 -0.7492  0.0070  0.7614  4.5905 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   0.14059    0.01724   8.156 4.40e-16 ***\nx[test == 1]  0.08875    0.01784   4.973 6.81e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.118 on 4768 degrees of freedom\nMultiple R-squared:  0.005161,\tAdjusted R-squared:  0.004952 \nF-statistic: 24.73 on 1 and 4768 DF,  p-value: 6.811e-07\n```\n\n\n:::\n\n```{.r .cell-code}\ngwas_x <- gwas(x, cbind(g, gx))\ngwas_y <- gwas(y, cbind(g, gx))\n\ndat <- merge_exp_out(gwas_x, gwas_y)\nlibrary(TwoSampleMR)\nmr(dat, method_list=\"mr_ivw\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAnalysing 'X' on 'Y'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id.exposure id.outcome outcome exposure                    method nsnp\n1           X          Y       Y        X Inverse variance weighted  200\n            b         se      pval\n1 -0.01705005 0.03722552 0.6469378\n```\n\n\n:::\n\n```{.r .cell-code}\ngwas_x_test <- gwas(x[test==1], cbind(g, gx)[test==1,])\ngwas_y_test <- gwas(y[test==1], cbind(g, gx)[test==1,])\ngwas_test <- gwas(test, cbind(g, gx))\n\ndat_test <- merge_exp_out(gwas_x_test, gwas_y_test)\nmr(dat_test, method_list=\"mr_ivw\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAnalysing 'X' on 'Y'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id.exposure id.outcome outcome exposure                    method nsnp\n1           X          Y       Y        X Inverse variance weighted  200\n          b         se         pval\n1 0.1730708 0.04249289 4.642449e-05\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_test2 <- merge_exp_out(gwas_x_test, gwas_y)\nmr(dat_test2, method_list=\"mr_ivw\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAnalysing 'X' on 'Y'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id.exposure id.outcome outcome exposure                    method nsnp\n1           X          Y       Y        X Inverse variance weighted  200\n           b         se       pval\n1 0.08982225 0.04301305 0.03677478\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsig_index <- gwas_x_test$pval < 5e-8 | gwas_test$pval < 5e-8\nsummary(lm(gwas_y_test$bhat[sig_index] ~ 0 + gwas_x_test$bhat[sig_index] + gwas_test$bhat[sig_index], weight=1/gwas_y_test$se[sig_index]^2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = gwas_y_test$bhat[sig_index] ~ 0 + gwas_x_test$bhat[sig_index] + \n    gwas_test$bhat[sig_index], weights = 1/gwas_y_test$se[sig_index]^2)\n\nWeighted Residuals:\n    Min      1Q  Median      3Q     Max \n-1.7689 -0.5755  0.1131  0.7070  2.6460 \n\nCoefficients:\n                            Estimate Std. Error t value Pr(>|t|)    \ngwas_x_test$bhat[sig_index] -0.33688    0.07541  -4.467 0.000127 ***\ngwas_test$bhat[sig_index]    1.99453    0.30199   6.605 4.37e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.117 on 27 degrees of freedom\nMultiple R-squared:  0.6492,\tAdjusted R-squared:  0.6232 \nF-statistic: 24.99 on 2 and 27 DF,  p-value: 7.212e-07\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(lm(gwas_y_test$bhat[sig_index] ~ 0 + gwas_x_test$bhat[sig_index] + gwas_test$bhat[sig_index], weight=1/gwas_y_test$se[sig_index]^2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = gwas_y_test$bhat[sig_index] ~ 0 + gwas_x_test$bhat[sig_index] + \n    gwas_test$bhat[sig_index], weights = 1/gwas_y_test$se[sig_index]^2)\n\nWeighted Residuals:\n    Min      1Q  Median      3Q     Max \n-1.7689 -0.5755  0.1131  0.7070  2.6460 \n\nCoefficients:\n                            Estimate Std. Error t value Pr(>|t|)    \ngwas_x_test$bhat[sig_index] -0.33688    0.07541  -4.467 0.000127 ***\ngwas_test$bhat[sig_index]    1.99453    0.30199   6.605 4.37e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.117 on 27 degrees of freedom\nMultiple R-squared:  0.6492,\tAdjusted R-squared:  0.6232 \nF-statistic: 24.99 on 2 and 27 DF,  p-value: 7.212e-07\n```\n\n\n:::\n:::\n\n\nSimulation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrun_sim <- function(nsnp, n, h2_x, h2_y, h2_u, b_us, b_xs, b_ints, b_uy, sim=1) {\n    args <- tibble(nsnp, n, h2_x, h2_u, b_us, b_xs, b_ints, b_uy, sim)\n    gu <- make_geno(n, nsnp, 0.5)\n    effsu <- choose_effects(nsnp, h2_u)\n    u <- make_phen(effsu, gu)\n    uxy <- rnorm(n)\n\n    gx <- make_geno(n, nsnp, 0.5)\n    effsx <- choose_effects(nsnp, h2_x)\n    x <- make_phen(c(0.2, effsx), cbind(uxy, gx))\n\n    test <- rbinom(n, 1, plogis(u * b_us + x * b_xs + u*x * b_ints))\n\n    y <- make_phen(c(b_uy, 0.2), cbind(u, uxy))\n    res <- list()\n    res[[1]] <- summary(lm(y ~ x))$coef %>% as_tibble() %>% janitor::clean_names() %>% mutate(method=\"obs\", exp=\"x\", out=\"y\", sel=\"none\") %>% slice(2)\n    res[[2]] <- summary(lm(y[test==1] ~ x[test==1]))$coef %>% as_tibble() %>% janitor::clean_names() %>% mutate(method=\"obs\", exp=\"x\", out=\"y\", sel=\"x and y\") %>% slice(2)\n\n    gwas_x <- gwas(x, cbind(gu, gx))\n    gwas_y <- gwas(y, cbind(gu, gx))\n    \n    sel <- gwas_x$pval < 5e-8\n    res[[3]] <- summary(lm(gwas_y$bhat[sel] ~ 0 + gwas_x$bhat[sel], weight=1/gwas_y$se[sel]^2 ))$coef %>% as_tibble() %>% janitor::clean_names() %>% mutate(method=\"mr\", exp=\"x\", out=\"y\", sel=\"none\") %>% slice(1)\n\n    gwas_x_test <- gwas(x[test==1], cbind(gu, gx)[test==1,])\n    gwas_y_test <- gwas(y[test==1], cbind(gu, gx)[test==1,])\n\n    sel <- gwas_x_test$pval < 5e-8\n    res[[4]] <- summary(lm(gwas_y_test$bhat[sel] ~ 0 + gwas_x_test$bhat[sel], weight=1/gwas_y_test$se[sel]^2 ))$coef %>% as_tibble() %>% janitor::clean_names() %>% mutate(method=\"mr\", exp=\"x\", out=\"y\", sel=\"x and y\") %>% slice(1)\n\n    res[[5]] <- summary(lm(gwas_y$bhat[sel] ~ 0 + gwas_x_test$bhat[sel], weight=1/gwas_y$se[sel]^2 ))$coef %>% as_tibble() %>% janitor::clean_names() %>% mutate(method=\"mr\", exp=\"x\", out=\"y\", sel=\"x\") %>% slice(1)\n\n    res[[6]] <- summary(lm(gwas_y_test$bhat[sel] ~ 0 + gwas_x$bhat[sel], weight=1/gwas_y_test$se[sel]^2 ))$coef %>% as_tibble() %>% janitor::clean_names() %>% mutate(method=\"mr\", exp=\"x\", out=\"y\", sel=\"y\") %>% slice(1)\n\n    gwas_test <- gwas(test, cbind(gu, gx))\n\n    sel <- gwas_x_test$pval < 5e-8 | gwas_test$pval < 5e-8\n    res[[7]] <- summary(lm(gwas_y_test$bhat[sel] ~ 0 + gwas_x_test$bhat[sel] + gwas_test$bhat[sel], weight=1/gwas_y_test$se[sel]^2))$coef %>% as_tibble() %>% janitor::clean_names() %>% mutate(method=\"mvmr\", exp=\"x\", out=\"y\", sel=\"x and y\") %>% slice(1)\n    \n    res[[8]] <- summary(lm(gwas_y$bhat[sel] ~ 0 + gwas_x_test$bhat[sel] + gwas_test$bhat[sel], weight=1/gwas_y$se[sel]^2))$coef %>% as_tibble() %>% janitor::clean_names() %>% mutate(method=\"mvmr\", exp=\"x\", out=\"y\", sel=\"x\") %>% slice(1)\n\n    res[[9]] <- summary(lm(gwas_y_test$bhat[sel] ~ 0 + gwas_x$bhat[sel] + gwas_test$bhat[sel], weight=1/gwas_y_test$se[sel]^2))$coef %>% as_tibble() %>% janitor::clean_names() %>% mutate(method=\"mvmr\", exp=\"x\", out=\"y\", sel=\"y\") %>% slice(1)\n\n    res[[10]] <- summary(lm(gwas_y$bhat[sel] ~ 0 + gwas_x$bhat[sel] + gwas_test$bhat[sel], weight=1/gwas_y$se[sel]^2))$coef %>% as_tibble() %>% janitor::clean_names() %>% mutate(method=\"mvmr\", exp=\"x\", out=\"y\", sel=\"none\") %>% slice(1)\n\n    return(bind_rows(res) %>% select(method, exp, out, sel, everything()) %>% bind_cols(args, .))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrun_sim(100, 50000, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5) %>% str\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [10 × 17] (S3: tbl_df/tbl/data.frame)\n $ nsnp     : num [1:10] 100 100 100 100 100 100 100 100 100 100\n $ n        : num [1:10] 50000 50000 50000 50000 50000 50000 50000 50000 50000 50000\n $ h2_x     : num [1:10] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5\n $ h2_u     : num [1:10] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5\n $ b_us     : num [1:10] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5\n $ b_xs     : num [1:10] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5\n $ b_ints   : num [1:10] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5\n $ b_uy     : num [1:10] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5\n $ sim      : num [1:10] 1 1 1 1 1 1 1 1 1 1\n $ method   : chr [1:10] \"obs\" \"obs\" \"mr\" \"mr\" ...\n $ exp      : chr [1:10] \"x\" \"x\" \"x\" \"x\" ...\n $ out      : chr [1:10] \"y\" \"y\" \"y\" \"y\" ...\n $ sel      : chr [1:10] \"none\" \"x and y\" \"none\" \"x and y\" ...\n $ estimate : num [1:10] 0.044993 0.117134 -0.000159 0.069973 0.006623 ...\n $ std_error: num [1:10] 0.00447 0.00649 0.00631 0.02118 0.02399 ...\n $ t_value  : num [1:10] 10.0708 18.044 -0.0251 3.3041 0.2761 ...\n $ pr_t     : num [1:10] 7.84e-24 2.58e-72 9.80e-01 1.67e-03 7.83e-01 ...\n```\n\n\n:::\n:::\n\n\nAdjusting for the GWAS for test status makes things horribly worse\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparam <- expand.grid(\n    n=50000, nsnp=100,\n    h2_x=0.5, h2_u=0.5, b_us = 0.5, b_xs = c(0, 0.5), b_ints = c(0, 0.5), b_uy = 0.5,\n    sim=1:20\n)\n\nopt <- furrr::furrr_options(seed=TRUE)\nplan(multicore, workers=7)\nout <- future_pmap(param, run_sim, .options=opt) %>%\n    bind_rows()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(out %>% filter(b_ints==0.5), aes(x=sel, y=estimate)) +\ngeom_hline(yintercept=0, linetype=\"dotted\") +\ngeom_violin(aes(fill=sel)) +\nfacet_grid(method ~ b_xs, label=label_both, scale=\"free_x\") +\nlabs(y=\"Effect estimate\", x=\"Which variable is GWAS'd in only tested individuals\", fill=\"\") +\nscale_fill_brewer(type=\"qual\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.5.1 (2025-06-13)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sonoma 14.6.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.1\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ggplot2_3.5.2      furrr_0.3.1        future_1.49.0      janitor_2.2.1     \n[5] dplyr_1.1.4        TwoSampleMR_0.6.16 simulateGP_0.1.3  \n\nloaded via a namespace (and not attached):\n [1] generics_0.1.3     stringi_1.8.7      listenv_0.9.1      digest_0.6.37     \n [5] magrittr_2.0.3     evaluate_1.0.3     grid_4.5.1         timechange_0.3.0  \n [9] RColorBrewer_1.1-3 fastmap_1.2.0      plyr_1.8.9         jsonlite_2.0.0    \n[13] purrr_1.0.4        scales_1.4.0       codetools_0.2-20   cli_3.6.5         \n[17] rlang_1.1.6        parallelly_1.44.0  withr_3.0.2        yaml_2.3.10       \n[21] tools_4.5.1        parallel_4.5.1     globals_0.18.0     vctrs_0.6.5       \n[25] R6_2.6.1           lifecycle_1.0.4    lubridate_1.9.4    snakecase_0.11.1  \n[29] stringr_1.5.1      htmlwidgets_1.6.4  pkgconfig_2.0.3    pillar_1.10.2     \n[33] gtable_0.3.6       data.table_1.17.0  glue_1.8.0         Rcpp_1.0.14       \n[37] xfun_0.52          tibble_3.2.1       tidyselect_1.2.1   knitr_1.50        \n[41] farver_2.1.2       htmltools_0.5.8.1  labeling_0.4.3     rmarkdown_2.29    \n[45] compiler_4.5.1    \n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}