{
  "hash": "d56eb07dbd05c907563d3fccb80b3e1f",
  "result": {
    "markdown": "---\ntitle: \"Correlated SNPs\"\nauthor: \"Gibran Hemani\"\ndate: \"2022-08-12\"\n---\n\n\n## MR type 1 error rate\n\nOne instrument for X and X has no influence on Y\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(TwoSampleMR)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nTwoSampleMR version 0.5.6 \n[>] New: Option to use non-European LD reference panels for clumping etc\n[>] Some studies temporarily quarantined to verify effect allele\n[>] See news(package='TwoSampleMR') and https://gwas.mrcieu.ac.uk for further details\n```\n:::\n\n```{.r .cell-code}\nlibrary(simulateGP)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'simulateGP'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:TwoSampleMR':\n\n    allele_frequency, contingency, get_population_allele_frequency\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(12345)\nmap <- tibble(snp=1, af=0.5)\nparams_x <- generate_gwas_params(map=map, h2=0.01, S=-0.4, Pi=1)\nparams_y <- generate_gwas_params(map=map, h2=0.0, S=-0.4, Pi=1)\nnid <- 100000\nss <- summary_set(\n    beta_gx=params_x$beta,\n    beta_gy=params_y$beta,\n    af=params_x$af,\n    n_gx=10000,\n    n_gy=10000,\n    n_overlap=0,\n    cor_xy=0.5\n)\n```\n:::\n\n\nPerform MR with single causal variant\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmr(ss) %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAnalysing 'X' on 'Y'\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 9\n$ id.exposure <chr> \"X\"\n$ id.outcome  <chr> \"Y\"\n$ outcome     <chr> \"Y\"\n$ exposure    <chr> \"X\"\n$ method      <chr> \"Wald ratio\"\n$ nsnp        <dbl> 1\n$ b           <dbl> -0.08648138\n$ se          <dbl> 0.0892847\n$ pval        <dbl> 0.3327436\n```\n:::\n:::\n\n\nPerform MR with causal variant + 100 correlated tag SNPs\n\n\n::: {.cell}\n\n```{.r .cell-code}\nss2 <- ss[rep(1,100),] %>% mutate(SNP=1:100)\nmr(ss2, method_list=\"mr_ivw\") %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAnalysing 'X' on 'Y'\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 9\n$ id.exposure <chr> \"X\"\n$ id.outcome  <chr> \"Y\"\n$ outcome     <chr> \"Y\"\n$ exposure    <chr> \"X\"\n$ method      <chr> \"Inverse variance weighted\"\n$ nsnp        <int> 100\n$ b           <dbl> -0.08648138\n$ se          <dbl> 0.00892847\n$ pval        <dbl> 3.457243e-22\n```\n:::\n:::\n\n\nVery small p-value - inflated type 1 error\n\n## GRS correlation performance\n\nTag SNPs are perfectly correlated with causal variant\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim <- function(nid=10000, nsnp=10)\n{\n  g <- matrix(0, nid, nsnp)\n  g[,1] <- rnorm(nid)\n  for(i in 2:nsnp)\n  {\n    g[,i] <- g[,1]\n  }\n  y <- g[,1] + rnorm(nid)\n  summary(lm(y ~ g[,1]))\n  grs <- rowSums(g)\n  return(c(cor(y, g[,1])^2, cor(y, grs)^2))\n}\nsapply(1:10, function(i) sim()) %>% rowMeans() %>% tibble(method=c(\"Causal variant only\", \"GRS\"), rsq=.)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  method                rsq\n  <chr>               <dbl>\n1 Causal variant only 0.500\n2 GRS                 0.500\n```\n:::\n:::\n\n\nGRS and single causal variant work the same as Jack showed.\n\n\nTag SNPs are imperfectly correlated with causal variant\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim <- function(nid=10000, nsnp=10)\n{\n  g <- matrix(0, nid, nsnp)\n  g[,1] <- rnorm(nid)\n  for(i in 2:nsnp)\n  {\n    g[,i] <- g[,i] + rnorm(nid, sd=0.5)\n  }\n  y <- g[,1] + rnorm(nid)\n  summary(lm(y ~ g[,1]))\n  grs <- rowSums(g)\n  return(c(cor(y, g[,1])^2, cor(y, grs)^2))\n}\nsapply(1:10, function(i) sim()) %>% rowMeans() %>% tibble(method=c(\"Causal variant only\", \"GRS\"), rsq=.)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  method                rsq\n  <chr>               <dbl>\n1 Causal variant only 0.500\n2 GRS                 0.156\n```\n:::\n:::\n\n\nNow the GRS doesn't work well because it includes the variance of the SNP + noise that isn't causally related to the trait.\n\n\n$$\nr^2 = \\frac{cov(grs, y)^2}{var(grs) var(y)}\n$$\n\n\ni.e. cov(grs,y) isn't increasing, but (var(y)) is.\n\n\n## Checking\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 10000\nnsnp <- 10\ng <- matrix(0, n, nsnp)\ng[,1] <- rnorm(n)\nfor(i in 2:nsnp)\n{\n  g[,i] <- g[,i] + rnorm(n, sd=0.5)\n}\ny <- g[,1] + rnorm(n)\ngrs <- rowSums(g)\ncov(y, grs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.003715\n```\n:::\n\n```{.r .cell-code}\ncov(y, g[,1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.9788621\n```\n:::\n\n```{.r .cell-code}\nsd(grs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.805151\n```\n:::\n\n```{.r .cell-code}\nsd(g[,1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.996039\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.1 Patched (2022-09-06 r82817)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Monterey 12.6\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.0.10      simulateGP_0.1.2  TwoSampleMR_0.5.6\n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.9        plyr_1.8.7        compiler_4.2.1    pillar_1.8.1     \n [5] iterators_1.0.14  tools_4.2.1       mr.raps_0.2       digest_0.6.29    \n [9] jsonlite_1.8.0    evaluate_0.16     lifecycle_1.0.3   tibble_3.1.8     \n[13] lattice_0.20-45   pkgconfig_2.0.3   rlang_1.0.6       Matrix_1.4-1     \n[17] foreach_1.5.2     DBI_1.1.3         cli_3.4.1         yaml_2.3.5       \n[21] xfun_0.33         fastmap_1.1.0     stringr_1.4.1     knitr_1.40       \n[25] generics_0.1.3    htmlwidgets_1.5.4 vctrs_0.5.1       tidyselect_1.1.2 \n[29] glmnet_4.1-4      grid_4.2.1        nortest_1.0-4     glue_1.6.2       \n[33] R6_2.5.1          fansi_1.0.3       survival_3.4-0    rmarkdown_2.16   \n[37] purrr_0.3.4       magrittr_2.0.3    ellipsis_0.3.2    codetools_0.2-18 \n[41] htmltools_0.5.3   splines_4.2.1     assertthat_0.2.1  shape_1.4.6      \n[45] utf8_1.2.2        stringi_1.7.8    \n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}