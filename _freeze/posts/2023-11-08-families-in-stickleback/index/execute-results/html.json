{
  "hash": "a63c91ba5c206d38bb9a6db283e4ed2e",
  "result": {
    "markdown": "---\ntitle: \"Founders in population expansion\"\nauthor: Gibran Hemani\ndate: \"2023-11-08\"\ncategories: []\n---\n\n\n## Background\n\nAfter discussion with [Katy Peichel](https://www.bigbiology.org/episodes/2023/9/21/ep-106-long-term-experimental-evolution-in-the-wild-with-katie-peichel-and-andrew-hendry) about MR for natural selection in an experimental situation.\n\n9k three-spine stickleback fish populated 10 lakes, and in three is now several hundred thousand. How many of the founders actually contribute to the gene pool after a few generations?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(vctrs)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'vctrs'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    data_frame\n```\n:::\n\n```{.r .cell-code}\nfounder_population <- function(n1, n2) {\n    bind_rows(\n        tibble(iid=paste0(\"f0_\", 1:n1), fid=iid, sex=1),\n        tibble(iid=paste0(\"f0_\", (n1+1):n2), fid=iid, sex=2)\n    ) %>% mutate(generation=0)\n}\n\nsample_nchildren <- function(n) {\n    rpois(n, 10)^2\n}\n\nsimulate_children <- function(founder, pdeath) {\n    lastgen <- strsplit(founder$iid[1], \"_\")[[1]][1] %>% gsub(\"f\", \"\", .) %>% as.numeric()\n    thisgen <- lastgen + 1\n    p <- founder %>%\n        mutate(death = rbinom(n(), 1, pdeath)) %>%\n        filter(death == 0)\n    n <- round(nrow(p)/2)\n    founder$i <- 1:nrow(founder)\n    ind1 <- subset(founder, sex==1)$i %>% {sample(., n, replace=TRUE)}\n    ind2 <- subset(founder, sex==2)$i %>% {sample(., n, replace=TRUE)}\n    parents <- tibble(\n        dad=founder$iid[ind1],\n        mum=founder$iid[ind2],\n        fid=paste(founder$fid[ind1], founder$fid[ind2]),\n        nchildren=sample_nchildren(n)\n    )\n    ind <- vec_rep_each(1:n, parents$nchildren)\n    children <- tibble(\n        iid = paste0(\"f\", thisgen, \"_\", 1:length(ind)),\n        mum = parents$mum[ind],\n        dad = parents$dad[ind],\n        fid = parents$fid[ind],\n        sex = rbinom(length(dad), 1, 0.5) + 1,\n        generation=thisgen\n    )\n    return(children)\n}\n```\n:::\n\n\nGenerate founder population\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- founder_population(4500, 4500)\nb <- simulate_children(a, 0.1)\nb1 <- simulate_children(b, 0.9)\n\ndim(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 216444      6\n```\n:::\n\n```{.r .cell-code}\ndim(b1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1183435       6\n```\n:::\n:::\n\n\nDo subsequent generations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- list()\nl[[1]] <- founder_population(4500, 4500)\nfor(i in 2:4) {\n    l[[i]] <- simulate_children(l[[i-1]], 0.95)\n    print(dim(l[[i]]))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11864     6\n[1] 29805     6\n[1] 82869     6\n```\n:::\n\n```{.r .cell-code}\ndat <- bind_rows(l)\ndim(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 129040      6\n```\n:::\n\n```{.r .cell-code}\ntail(dat$fid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"f0_1141 f0_4500 f0_122 f0_4501 f0_448 f0_4501 f0_3351 f0_4500\"\n[2] \"f0_1141 f0_4500 f0_122 f0_4501 f0_448 f0_4501 f0_3351 f0_4500\"\n[3] \"f0_1141 f0_4500 f0_122 f0_4501 f0_448 f0_4501 f0_3351 f0_4500\"\n[4] \"f0_1141 f0_4500 f0_122 f0_4501 f0_448 f0_4501 f0_3351 f0_4500\"\n[5] \"f0_1141 f0_4500 f0_122 f0_4501 f0_448 f0_4501 f0_3351 f0_4500\"\n[6] \"f0_1141 f0_4500 f0_122 f0_4501 f0_448 f0_4501 f0_3351 f0_4500\"\n```\n:::\n\n```{.r .cell-code}\nhead(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n  iid   fid     sex generation mum   dad  \n  <chr> <chr> <dbl>      <dbl> <chr> <chr>\n1 f0_1  f0_1      1          0 <NA>  <NA> \n2 f0_2  f0_2      1          0 <NA>  <NA> \n3 f0_3  f0_3      1          0 <NA>  <NA> \n4 f0_4  f0_4      1          0 <NA>  <NA> \n5 f0_5  f0_5      1          0 <NA>  <NA> \n6 f0_6  f0_6      1          0 <NA>  <NA> \n```\n:::\n:::\n\n\nHow many founders per generation?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnfounders_per_generation <- function(dat) {\n    group_by(dat, generation) %>%\n        do({\n            tibble(founder = unlist(strsplit(.$fid, \" \")))\n        }) %>%\n        ungroup() %>%\n        group_by(generation, founder) %>%\n            summarise(n=n())\n}\n\ncounts <- nfounders_per_generation(dat)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'generation'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\ncounts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4,841 × 3\n# Groups:   generation [4]\n   generation founder     n\n        <dbl> <chr>   <int>\n 1          0 f0_1        1\n 2          0 f0_10       1\n 3          0 f0_100      1\n 4          0 f0_1000     1\n 5          0 f0_1001     1\n 6          0 f0_1002     1\n 7          0 f0_1003     1\n 8          0 f0_1004     1\n 9          0 f0_1005     1\n10          0 f0_1006     1\n# ℹ 4,831 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(counts$generation)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   0    1    2    3 \n4501  116  112  112 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(counts$n, breaks=100)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(counts$n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n     1      2     16     25     36     49     64     81    100    117    121 \n  4500      1      1      2     13     15     15     17     13      1     22 \n   128    144    145    164    166    169    170    174    179    181    195 \n     1     10      1      1      1      6      1      1      1      1      1 \n   196    202    219    221    225    242    250    256    260    270    276 \n     5      1      1      2      3      3      2      2      1      1      1 \n   289    290    300    302    345    351    355    357    362    363    365 \n     2      1      2      1      1      1      1      1      1      1      1 \n   369    371    373    374    375    377    382    388    389    390    394 \n     1      1      1      1      1      1      1      1      1      2      1 \n   396    400    415    417    427    433    452    477    484    485    491 \n     1      1      1      1      1      1      1      1      1      1      1 \n   494    495    510    512    523    528    546    561    563    564    565 \n     1      1      1      1      1      1      2      2      1      1      1 \n   569    594    603    607    608    611    617    637    642    668    673 \n     1      1      1      1      1      1      1      1      1      1      1 \n   680    687    696    707    708    722    757    758    784    785    786 \n     1      1      1      1      1      1      1      1      1      1      2 \n   790    792    798    846    848    852    884    969    977    983    999 \n     1      1      1      1      1      1      1      1      1      1      1 \n  1025   1028   1036   1046   1055   1079   1082   1101   1106   1146   1221 \n     1      1      1      1      1      1      1      1      1      1      1 \n  1230   1242   1270   1329   1403   1443   1465   1466   1471   1507   1517 \n     1      1      1      1      1      1      1      1      1      1      1 \n  1518   1544   1593   1610   1714   1731   1741   1787   1798   1811   1829 \n     1      1      1      1      1      1      1      1      1      1      1 \n  1844   1854   1859   1866   1869   1973   1988   2029   2055   2092   2166 \n     1      1      1      1      1      1      1      1      1      1      1 \n  2201   2274   2285   2293   2303   2379   2466   2479   2565   2583   2657 \n     1      1      1      1      1      1      1      1      1      1      1 \n  2674   2752   2800   2807   2905   2921   3057   3096   3100   3190   3313 \n     1      1      1      1      1      1      1      1      1      1      1 \n  3381   3460   3463   3533   3535   3546   3682   3707   3931   3963   4144 \n     1      1      1      1      1      1      1      1      1      1      1 \n  4207   4244   4270   4347   4449   4752   4785   4826   4925   5008   5036 \n     1      1      1      1      1      1      1      1      1      1      1 \n  5265   5284   5310   5525   5587   5593   6014   6339   6897   7105   7300 \n     1      1      1      1      1      1      1      1      1      1      1 \n  7362   7376   7548   8442   8494   9081   9643  10005  29685  29925 161730 \n     1      1      1      1      1      1      1      1      1      1      1 \n169746 \n     1 \n```\n:::\n:::\n\n\nVery few original pairings are represented by generation 3\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.2 (2023-10-31)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.6\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] vctrs_0.6.4 dplyr_1.1.4\n\nloaded via a namespace (and not attached):\n [1] digest_0.6.33     utf8_1.2.4        R6_2.5.1          fastmap_1.1.1    \n [5] tidyselect_1.2.0  xfun_0.41         magrittr_2.0.3    glue_1.6.2       \n [9] tibble_3.2.1      knitr_1.45        pkgconfig_2.0.3   htmltools_0.5.7  \n[13] rmarkdown_2.25    generics_0.1.3    lifecycle_1.0.4   cli_3.6.1        \n[17] fansi_1.0.5       withr_2.5.2       compiler_4.3.2    tools_4.3.2      \n[21] pillar_1.9.0      evaluate_0.23     yaml_2.3.7        rlang_1.1.2      \n[25] jsonlite_1.8.7    htmlwidgets_1.6.3\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}