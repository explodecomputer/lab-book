{
  "hash": "a6aa40cebf8d294b043e1d3c7f3108f5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"2025-01-21-clustering-prs\"\nauthor: Gibran Hemani\ndate: \"2025-03-20\"\ncategories: []\n---\n\n\n## Background\n\nIf a trait is a composite of different sub-traits then is it possible to recover those sub-traits by identifying clustering variants into scores and then clustering scores?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(simulateGP)\n\n\nn <- 100000\nnclust <- 5\nnsnp_per_trait <- 10\nntrait_per_clust <- 10\n\nmake_cluster <- function(n, nsnp_per_trait, ntrait_per_clust) {\n    \n    G <- list()\n    for(i in 1:ntrait_per_clust) {\n        g <- matrix(rbinom(n * nsnp_per_trait, 2, 0.3), nrow=n)\n        G[[i]] <- g\n        trait <- scale(g) %*% rnorm(nsnp_per_trait)\n        if(i == 1) {\n            trait_all <- trait\n        } else {\n            trait_all <- cbind(trait_all, trait)\n        }\n    }\n    G <- do.call(cbind, G)\n\n    return(list(G=G, T=trait_all))\n}\n\nmake_disease <- function(n, nclust, nsnp_per_trait, ntrait_per_clust) {\n    \n    L <- list()\n    for(i in 1:nclust) {\n        L[[i]] <- make_cluster(n, nsnp_per_trait, ntrait_per_clust)\n    }\n    \n    T <- lapply(L, \\(x) x$T) %>% do.call(cbind, .)\n    D <- tibble(\n        liability = as.matrix(T) %*% rnorm(ncol(T)) %>% drop(),\n        disease = rbinom(n, 1, plogis(liability))\n    )\n    G <- lapply(L, \\(x) x$G) %>% do.call(cbind, .)\n    return(list(G=G, T=T, D=D))\n}\n\ngwas <- function(y, g) {\n    (cov(y, g) / apply(g, 2, var)) %>% drop()\n}\n\nmake_effects_matrix <- function(dat) {\n    o <- lapply(1:ncol(dat$T), \\(i) {\n        simulateGP::gwas(dat$T[,i], dat$G)$fval\n    }) %>% do.call(cbind, .)\n    return(o)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- make_disease(n, nclust, nsnp_per_trait, ntrait_per_clust=1)\neffects_matrix <- make_effects_matrix(dat)\n\ndim(effects_matrix)\ndim(gwas(dat$D$disease, dat$G))\neffects_matrix[1:5, 1:5]\no[1:5, 1:5]\n\na <- princomp(sqrt(effects_matrix))\ns <- a$scores\ns[s < 0] <- NA\n\nplot(s[,1], s[,3], col=dat$D$disease+1)\n\n\n\nstr(dat)\ntable(dat$D$disease)\n```\n:::\n\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.3 (2025-02-28)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sonoma 14.6.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] simulateGP_0.1.3 dplyr_1.1.4     \n\nloaded via a namespace (and not attached):\n [1] digest_0.6.37     utf8_1.2.4        R6_2.5.1          fastmap_1.2.0    \n [5] tidyselect_1.2.1  xfun_0.48         magrittr_2.0.3    glue_1.8.0       \n [9] tibble_3.2.1      knitr_1.48        pkgconfig_2.0.3   htmltools_0.5.8.1\n[13] rmarkdown_2.27    generics_0.1.3    lifecycle_1.0.4   cli_3.6.3        \n[17] fansi_1.0.6       vctrs_0.6.5       compiler_4.4.3    tools_4.4.3      \n[21] pillar_1.9.0      evaluate_1.0.1    yaml_2.3.10       rlang_1.1.4      \n[25] jsonlite_1.8.9    htmlwidgets_1.6.4\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}