{
  "hash": "18550a63bb82156f46e36b87f42faba5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"GRM lookups\"\nauthor: Gibran Hemani\ndate: \"2024-08-30\"\ncategories: []\nexecute:\n    eval: false\n---\n\n\n## Background\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nlibrary(dplyr)\n\n\n#' Get just one row of the triangle GRM matrix\n#' \n#' @param i ID to extract (location ID rather than character ID e.g. row 100)\n#' @param ki List of all IDs to extract (location IDs again)\n#' @param b GRM file rootname\n#' \n#' @return vector of length i's position in ki\nfindone <- function(i, ki, b) {\n  f <- file(b, \"rb\")\n  seek(f, where = (i * (i+1) / 2 - i) * 4)\n  a <- readBin(f, \"double\", n=i, size=4)\n  close(f)\n  x <- ki[ki <= i]\n  a[x]\n}\n\n\n#' Get all rows of the triangle GRM matrix for required individuals\n#' \n#' @param ki List of all IDs to extract (location IDs again)\n#' @param b GRM file rootname\nfindall <- function(ki, b) {\n  n <- length(ki)\n  mat <- matrix(0, n, n)\n  for(i in 1:n) {\n    message(i)\n    mat[i,1:i] <- mat[1:i, i] <- findone(ki[i], ki, b)\n  }\n  return(mat)\n}\n\n#' Get only diagonal elements from GRM\n#' \n#' @param n sample size of GRM\n#' @param b GRM file rootname\n#' \n#' @return vector of length n, should all be close to 1\ndiags <- function(n, b) {\n  f <- file(b, \"rb\")\n  x <- sapply(1:n, \\(i) {\n    seek(f, where = (i-1)*4, origin=\"current\")\n    readBin(f, \"double\", n=1, size=4)\n  })\n  close(f)\n  return(x)\n}\n\n# takes a few minutes\nd <- diags(ids, b)\nlength(d)\n\n# The first few look good\nhead(d)\n\n# But most of them are way off\nsummary(d)\n\n# Once we get to 10% of the sample the matrix is no longer following the expected pattern\nwhich(d < 0.75)[1]\nnrow(ids)\n\n# The matrix was generated by concatenating chunks from plink. Perhaps it's not possible to do this\n\n\n# Expected size of the GRM\nn <- nrow(ids)\nn * (n+1) / 2 * 4\n\n# This matches the exact size of the GRM\n\n\n\n\n\n\nmat <- \"/local-scratch/data/ukb/genetic/variants/arrays/imputed/draft/grm/full-ukb-indep\"\nids <- fread(paste0(mat, \".grm.id\")) %>% as_tibble()\n\nids\n\nb <- paste0(mat, \".grm.bin\")\nfile.exists(b)\n\nf <- file(b, \"rb\")\nreadBin(f, \"double\", n=1, size=4)\nseek(f, where=1)\nreadBin(f, \"double\", n=1, size=4)\nreadBin(f, \"double\", n=1, size=4)\nreadBin(f, \"double\", n=1, size=4)\nreadBin(f, \"double\", n=1, size=4)\nreadBin(f, \"double\", n=1, size=4)\nclose(f)\n\nki <- sort(sample(1:nrow(ids), 100, replace=FALSE))\n\n\n\nfindall(ki, b)\n\n\n\nfindone(ki[15], ki, b)\nfindone(9, 1:10, b)\n\n\ndiags <- function(ids, b) {\n  f <- file(b, \"rb\")\n  x <- sapply(1:nrow(ids), \\(i) {\n    seek(f, where = (i-1)*4, origin=\"current\")\n    readBin(f, \"double\", n=1, size=4)\n  })\n  close(f)\n  return(x)\n}\n\nd <- diags(ids, b)\nlength(d)\nsummary(d)\n```\n:::\n\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}