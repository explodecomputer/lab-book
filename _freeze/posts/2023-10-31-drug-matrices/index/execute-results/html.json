{
  "hash": "055404c01c61e67855b34b91067e5aaf",
  "result": {
    "markdown": "---\ntitle: \"Decomposing drug X side effect matrices\"\nauthor: Gibran Hemani\ndate: \"2023-10-31\"\ncategories: []\n---\n\n\n## Background\n\n**Aim:** Want to predict side effects using MR. \n\nHave a matrix of side effects x drugs. \n\n```\nA = n_se X m_drugs\n```\n\nEach drug binds some genes\n\n```\nB = p_genes X m_drugs\n```\n\nMR of each gene on all traits\n\n```\nC = q_traits X p_genes\n```\n\nand a matrix linking trait terms to side effect terms\n\n```\nD = q_traits X n_se\n```\n\n## Basic simulation\n\n- m=3 drugs\n- n=5 side effects\n- p=6 genes\n- q=10 traits\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# gene x drug - e.g. based on binding affinities\nB <- matrix(c(\n    0, 1, 1,\n    1, 0, 0,\n    0, 1, 0,\n    0, 0, 1,\n    0, 0, 0,\n    0, 1, 1\n), 6, 3)\n\n# trait x se - matches trait names to side effect terms\nD <- matrix(c(\n    1, 0, 0, 0, 0,\n    1, 0, 0, 0, 0,\n    0, 1, 0, 0, 0,\n    0, 1, 0, 0, 0,\n    0, 0, 1, 0, 0, \n    0, 0, 1, 0, 0,\n    0, 0, 1, 0, 0,\n    0, 0, 1, 0, 0,\n    0, 0, 0, 1, 0,\n    0, 0, 0, 1, 0\n), 10, 5)\n\n# True mapping of genes to side effects - we don't observe this\ngse <- matrix(c(\n    1, 0, 0, 0, 0, 0,\n    1, 1, 0, 0, 0, 0,\n    0, 0, 1, 0, 0, 0,\n    0, 0, 0, 1, 1, 0,\n    0, 0, 0, 0, 1, 0\n), 5, 6)\n\n# True drug x side effect matrix is generated from gene side effects by gene drug binding\nA <- gse %*% B\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    0    0    0\n[2,]    1    1    1\n[3,]    1    1    1\n[4,]    0    1    1\n[5,]    1    0    0\n```\n:::\n:::\n\n\n\nWe don't actually see the gse matrix. If everything works as we hypothesise then the trait x gene matrix that we observe would follow:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nC <- D %*% gse\nC\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      [,1] [,2] [,3] [,4] [,5] [,6]\n [1,]    1    0    0    0    0    0\n [2,]    0    1    0    0    1    0\n [3,]    0    1    0    0    1    1\n [4,]    0    0    1    0    0    0\n [5,]    0    0    0    0    0    0\n [6,]    1    0    0    0    0    0\n [7,]    0    1    0    0    1    0\n [8,]    0    1    0    0    1    1\n [9,]    0    0    1    0    0    0\n[10,]    0    0    0    0    0    0\n```\n:::\n:::\n\n\nNow we have B, C and D. How do we get back to A? Need to invert D, which isn't square so use Moore-Penrose pseudoinverse\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pracma)\nAhat <- pinv(D) %*% C %*% B\n```\n:::\n\n\nDoes the prediction match the true A?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(c(Ahat), c(A))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.9279607\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(Ahat, A)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nQuite close - the pseudoinverse has failed to get some of the values correct. Alternative to using pseudoinverse is to just manually re-label trait names with side effect values\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.0 (2023-04-21)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.6\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] pracma_2.4.2\n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.0    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.0       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43        xfun_0.39         digest_0.6.31    \n[13] jsonlite_1.8.7    rlang_1.1.1       evaluate_0.21    \n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}