{
  "hash": "25c440cff9754541cbf26ef7f26ca75a",
  "result": {
    "markdown": "---\ntitle: \"Generating PRS of clocks from mQTLs\"\nauthor: Gibran Hemani\ndate: \"2024-01-04\"\ncategories: []\n---\n\n\n## Background\n\nCan we generate a PRS for an epigenetic clock using just mQTLs?\n\n\n## Model\n\nThe clock is a weighted sum of CpGs. Each CpG has an mQTL. No other genetic factors influence the clock.\n\n## Simulation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(simulateGP)\nncpg <- 100\nnid <- 10000\n\nw <- rnorm(ncpg)\ng <- matrix(rbinom(ncpg * nid, 2, 0.5), nid, ncpg)\nb <- rnorm(ncpg, sd=0.1)\ne <- matrix(rnorm(ncpg * nid), nid, ncpg)\ncpgg <- t(t(g) * b)\ncpg <- cpgg + e\nclock <- cpg %*% w\nclockgwas <- gwas(clock, g)\nclockprs_direct <- g %*% clockgwas$bhat\n\nbhat <- sapply(1:ncpg, \\(i) {\n    fast_assoc(cpg[,i], g[,i])$bhat\n})\ncpghat <- t(t(g) * bhat)\nclockprs_mqtl <- cpghat %*% w\nplot(clockprs_direct, clockprs_mqtl)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nWhich is better powered?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(lm(clock ~ clockprs_direct))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = clock ~ clockprs_direct)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-37.279  -7.035  -0.015   6.933  44.983 \n\nCoefficients:\n                Estimate Std. Error t value Pr(>|t|)    \n(Intercept)     -0.92219    0.13001  -7.093  1.4e-12 ***\nclockprs_direct  1.01061    0.07803  12.951  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 10.35 on 9998 degrees of freedom\nMultiple R-squared:  0.0165,\tAdjusted R-squared:  0.0164 \nF-statistic: 167.7 on 1 and 9998 DF,  p-value: < 2.2e-16\n```\n:::\n\n```{.r .cell-code}\nsummary(lm(clock ~ clockprs_mqtl))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = clock ~ clockprs_mqtl)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-37.123  -7.076   0.032   6.962  45.099 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)     0.2571     0.1059   2.428   0.0152 *  \nclockprs_mqtl   1.0943     0.1332   8.215 2.39e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 10.41 on 9998 degrees of freedom\nMultiple R-squared:  0.006704,\tAdjusted R-squared:  0.006605 \nF-statistic: 67.48 on 1 and 9998 DF,  p-value: 2.387e-16\n```\n:::\n:::\n\n\n## Summary\n\n- Generating clock PRS using GWAS of clock is equivalent to generating the clock PRS indirectly from mQTLs\n- It's better powered to GWAS the clock directly than to use mQTLs, assuming same sample sizes for clock GWAS and mQTL\n- There may be latent heritable factors that influence CpGs that are not the known mQTLs, and which in aggregate are better powered to be detected by the clock GWAS. But these are likely to be a minority of the genetic variation for the clock.\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.2 (2023-10-31)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.6\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] simulateGP_0.1.2 dplyr_1.1.4     \n\nloaded via a namespace (and not attached):\n [1] digest_0.6.33     utf8_1.2.4        R6_2.5.1          fastmap_1.1.1    \n [5] tidyselect_1.2.0  xfun_0.41         magrittr_2.0.3    glue_1.6.2       \n [9] tibble_3.2.1      knitr_1.45        pkgconfig_2.0.3   htmltools_0.5.7  \n[13] rmarkdown_2.25    generics_0.1.3    lifecycle_1.0.4   cli_3.6.1        \n[17] fansi_1.0.5       vctrs_0.6.4       compiler_4.3.2    tools_4.3.2      \n[21] pillar_1.9.0      evaluate_0.23     yaml_2.3.7        rlang_1.1.2      \n[25] jsonlite_1.8.7    htmlwidgets_1.6.3\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}