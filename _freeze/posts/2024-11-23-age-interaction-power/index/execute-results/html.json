{
  "hash": "25a583936d52d025f2979678082a6158",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Power of G x age interactions\"\nauthor: Gibran Hemani\ndate: \"2024-11-23\"\ncategories: []\n---\n\n\n## Background\n\nIndividual level analysis versus age-stratified GWAS to detect GxAge interactions\n\n## Simulation setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(metafor)\nlibrary(ggplot2)\n# library(rms)\nset.seed(12345)\n```\n:::\n\n\nThe simulation is based on the following model:\n\n$$\ny_i = \\alpha + \\beta_0 g_i + \\beta_1 g_i a_i + \\beta_2 g_i a_i^2 + \\beta_3 g_i a_i^3 + e_i\n$$\n\nwhere $y_i$ is the phenotype of individual $i$, $g_i$ is the genotype, $a_i$ is the age normalised to have range $(-1,1)$, and $e_i$ is the error term. \n\nThe simulation is based on the following steps:\n\n1. Generate a set of coefficients for the age polynomial\n2. Generate a set of individuals with age, genotype, and error terms\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimdat <- function(n=500000, b0, b1, b2, b3) {\n    nage <- length(40:70)\n    coef <- tibble(\n        age = 40:70,\n        x = seq(-1, 1, length.out=nage),\n        bxage = x^3 * b3 + x^2 * b2 + x * b1 + b0\n    )\n\n    dat <- tibble(\n        age = runif(n, 40, 70) %>% round,\n        g = rbinom(n, 2, 0.5),\n        e = rnorm(n)\n    ) %>% group_by(age) %>%\n        do({\n            a <- subset(coef, age == .$age[1])\n            mutate(., prs = a$bxage * g, y = prs + e)\n        })\n\n    return(list(dat=dat, coef=coef))\n}\n```\n:::\n\n\nAn example of the simulation with **no interaction**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim <- simdat(500000, 0.02, 0, 0, 0)\nsim\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$dat\n# A tibble: 500,000 × 5\n# Groups:   age [31]\n     age     g       e   prs       y\n   <dbl> <int>   <dbl> <dbl>   <dbl>\n 1    40     2 -0.272   0.04 -0.232 \n 2    40     0 -2.08    0    -2.08  \n 3    40     0  0.490   0     0.490 \n 4    40     0 -0.279   0    -0.279 \n 5    40     1 -0.583   0.02 -0.563 \n 6    40     2  0.583   0.04  0.623 \n 7    40     2 -0.621   0.04 -0.581 \n 8    40     1 -0.0662  0.02 -0.0462\n 9    40     1  1.87    0.02  1.89  \n10    40     2  2.66    0.04  2.70  \n# ℹ 499,990 more rows\n\n$coef\n# A tibble: 31 × 3\n     age      x bxage\n   <int>  <dbl> <dbl>\n 1    40 -1      0.02\n 2    41 -0.933  0.02\n 3    42 -0.867  0.02\n 4    43 -0.8    0.02\n 5    44 -0.733  0.02\n 6    45 -0.667  0.02\n 7    46 -0.6    0.02\n 8    47 -0.533  0.02\n 9    48 -0.467  0.02\n10    49 -0.4    0.02\n# ℹ 21 more rows\n```\n\n\n:::\n:::\n\n\nEstimation is performed by \n\n1. generating summary statistics for 2-year age bins\n2. estimating the effects of the genotype on the phenotype in each age bin using a simple linear model\n3. performing a polynomial meta regression of \n\n$$\n\\beta_{age} \\sim age + age^2 + age^3\n$$\n\nAn example of the model fit is shown below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsumstats <- function(dat) {\n    # split dat into 2 year age bins\n    # dat <- dat %>% mutate(agebin = round(age / 2) * 2)\n    dat$agebin <- round(dat$age)\n    ss <- group_by(dat, agebin) %>%\n        do({\n            a <- summary(lm(y ~ g, data=.))\n            tibble(\n                agebin = .$agebin[1],\n                beta = a$coefficients[2, 1],\n                se = a$coefficients[2, 2]\n            )\n        })\n    return(ss)\n\n}\n\nplot_gxage <- function(sim) {\n    ss <- sumstats(sim$dat)\n    m2 <- rma.uni(yi=beta, sei=se, mods = ~ poly(agebin, degree=3, raw=TRUE), data=ss)\n    coefs <- tibble(\n        method=\"metareg\",\n        poly=0:3,\n        b = m2$beta[1:4],\n        se = m2$se[1:4],\n        pval = m2$pval[1:4]\n    )\n    sav <- predict(m2, newmods=unname(poly(ss$agebin, degree=3, raw=TRUE))) %>% as_tibble() %>% mutate(agebin=ss$agebin)\n    plot(pred ~ agebin, data=sav, type=\"l\")\n    lines(ci.lb ~ agebin, data=sav, type=\"l\", lty=2)\n    lines(ci.ub ~ agebin, data=sav, type=\"l\", lty=2)\n    lines(bxage ~ age, sim$coef, col=\"red\")\n    points(beta ~ agebin, data=ss, pch=16, cex=0.01/ss$se)\n    return(coefs)\n}\n\nplot_gxage(sim)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 5\n  method   poly            b         se  pval\n  <chr>   <int>        <dbl>      <dbl> <dbl>\n1 metareg     0  0.170       0.688      0.805\n2 metareg     1 -0.00786     0.0385     0.838\n3 metareg     2  0.000129    0.000708   0.855\n4 metareg     3 -0.000000644 0.00000429 0.881\n```\n\n\n:::\n:::\n\n\nThe red line is the true genotype x age coefficient, and the black line is the estimated effect of the genotype on the phenotype with age. Dotted lines are the confidence intervals.\n\nIn this example there is no heterogeneity in the effect of the genotype on the phenotype with age, so the confidence intervals of the polynomial fit are very wide.\n\nExample **with interaction**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsim <- simdat(500000, 0, 0.02, 0.02, 0.02)\nplot_gxage(sim)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 5\n  method   poly          b         se    pval\n  <chr>   <int>      <dbl>      <dbl>   <dbl>\n1 metareg     0 -1.62      0.621      0.00895\n2 metareg     1  0.0901    0.0347     0.00946\n3 metareg     2 -0.00167   0.000638   0.00897\n4 metareg     3  0.0000103 0.00000386 0.00749\n```\n\n\n:::\n:::\n\n\nNow the confidence intervals are much narrower, and the true effect of the genotype on the phenotype with age is captured by the polynomial fit.\n\n## Performance simulations\n\nEvaluate power and type 2 error of different approaches to detect G x age interactions. Approaches using age-stratified summary statistics:\n\n- Cochran's Q statistic\n- Meta-regression with simple linear model\n- Meta-regression with polynomial terms\n\nApproaches using individual level data across all ages:\n\n- Main effect of genotype (no interaction)\n- Linear G x age interaction\n- Polynomial G x age interaction\n\n\n::: {.cell}\n\n```{.r .cell-code}\nestimation <- function(dat) {\n    ss <- sumstats(dat)\n    m1 <- rma.uni(yi=ss$beta, sei=ss$se, method=\"FE\")\n    m2 <- rma.uni(yi=beta, sei=se, mods = ~ poly(agebin, degree=3), data=ss, method=\"FE\")\n    # m6 <- rma(yi=beta, sei=se, mods = ~ rcs(agebin, 4), data=ss)\n    m7 <- rma(yi=beta, sei=se, mods = ~ agebin, data=ss, method=\"FE\")\n\n    # Compare against individual level models\n    modpval <- function(mod) { pf(mod$fstat[1], mod$fstat[2], mod$fstat[3], lower.tail=FALSE) }\n\n    reducedmod <- lm(y ~ g, data=dat)\n    m5 <- anova(reducedmod, lm(y ~ g * age, data=dat))\n    m3 <- anova(reducedmod, lm(y ~ g * poly(age, 3), data=dat))\n    # m8 <- anova(reducedmod, lm(y ~ g * rcs(age, 4), data=dat))\n    m9 <- anova(reducedmod, lm(y ~ g * as.factor(age), data=dat))\n\n    bind_rows(\n        tibble(method=\"main\", pval=summary(reducedmod)$coefficients[2, 4]),\n        tibble(method=\"ind_linear\", pval=m5$P[2]),\n        tibble(method=\"ind_poly\", pval=m3$P[2]),\n        # tibble(method=\"ind_rcs\", pval=m8$P[2]),\n        tibble(method=\"ind_full\", pval=m9$P[2]),\n        tibble(method=\"heterogeneity\", Q=m1$QE, pval=m1$QEp),\n        tibble(method=\"meta_linear\", Q=m7$QM, pval=m7$QMp),\n        tibble(method=\"meta_poly\", Q=m2$QM, pval=m2$QMp),\n        # tibble(method=\"meta_rcs\", Q=m6$QM, pval=m6$QMp),\n    )\n}\n\n# Function to run whole simulation\nrun_sim <- function(b0=0, b1=0, b2=0, b3=0, n=500000, sim=1) {\n    args <- as.list(environment()) %>% as_tibble()\n    sim <- simdat(n, b0, b1, b2, b3)\n    est <- estimation(sim$dat)\n    est <- bind_cols(est, as_tibble(args))\n    return(est)\n}\n\n# Example\nrun_sim(0.02, 0, 0, 0.05)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 9\n  method            pval     Q    b0    b1    b2    b3      n   sim\n  <chr>            <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl>\n1 main          2.35e-22  NA    0.02     0     0  0.05 500000     1\n2 ind_linear    9.66e-47  NA    0.02     0     0  0.05 500000     1\n3 ind_poly      4.80e-52  NA    0.02     0     0  0.05 500000     1\n4 ind_full      1.41e-36  NA    0.02     0     0  0.05 500000     1\n5 heterogeneity 7.75e-14 127.   0.02     0     0  0.05 500000     1\n6 meta_linear   4.26e-19  79.7  0.02     0     0  0.05 500000     1\n7 meta_poly     7.25e-19  87.6  0.02     0     0  0.05 500000     1\n```\n\n\n:::\n\n```{.r .cell-code}\ndat <- simdat(500000, 0.02, 0, 0.02, 0.05)$dat\n```\n:::\n\n\nDo this over a range of scenarios (this was run on HPC in parallel)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(furrr)\nparam <- expand.grid(\n    n = c(300000),\n    b0 = c(0, -0.02),\n    b1 = c(0, 0.02),\n    b2 = c(0, -0.02, 0.02),\n    b3 = c(0, -0.02, 0.02),\n    sim=1:200\n)\n\nplan(multicore(workers=50))\nopt <- furrr_options(seed=TRUE)\nres <- future_pmap(param, run_sim, .progress=TRUE, .options=opt) %>% bind_rows()\n\nsaveRDS(res, \"sim.rds\")\n```\n:::\n\n\n\n## Results\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at /Users/gh13047/repo/lab-book\n```\n\n\n:::\n\n```{.r .cell-code}\nres <- readRDS(here(\"posts/2024-11-23-age-interaction-power/sim.rds\"))\n```\n:::\n\n\n\n**First check false discovery rates**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres %>% group_by(main = b0 != 0, gxage = (b1 != 0 | b2 != 0 | b3 != 0), method) %>%\n    summarise(power=mean(pval < 0.05)) %>%\n    filter(!gxage) %>%\n    ggplot(aes(x=method, y=power, fill=main)) +\n    geom_bar(stat=\"identity\", position=\"dodge\") +\n    geom_hline(yintercept=0.05, linetype=\"dashed\") +\n    labs(y=\"False discovery rate\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'main', 'gxage'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nModel names:\n\n- `main` = Individual level main effect of genotype with no interaction estimation\n- `ind_linear` = Individual level G x age with linear interaction\n- `ind_poly` = Individual level G x age with polynomial interaction\n- `ind_full` = Individual level G x age with age as a categorical variable\n- `heterogeneity` = Cochran's Q statistic for age-stratified summary statistics\n- `meta_linear` = Meta-regression for age-stratified summary statistics using linear interaction\n- `meta_poly` = Meta-regression for age-stratified summary statistics using polynomial interaction\n\nNote that all models are wrt \n\nSummary:\n\n- Heterogeneity has well controlled type 1 error when there is a main effect and when there is no main effect\n- individual level and meta regression linear models both have well controlled type 1 error when there is no interaction\n- individual level and meta regression polynomial models both have inflated type 1 error when there is no interaction (due to overfitting)\n\n**Check power**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nres %>% group_by(main = b0 != 0, gxage = (b1 != 0 | b2 != 0 | b3 != 0), method) %>%\n    summarise(power=mean(pval < 0.05)) %>%\n    filter(gxage) %>%\n    ggplot(aes(x=method, y=power, fill=main)) +\n    geom_bar(stat=\"identity\", position=\"dodge\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'main', 'gxage'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nSummary:\n\n- Detecting G x age using `heterogeneity` (Cochran's Q) is reasonably powered but has lower power than other approaches\n- Individual models have higher power than meta-regression models\n\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.1 (2024-06-14)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sonoma 14.6.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] here_1.0.1          ggplot2_3.5.1       metafor_4.6-0      \n[4] numDeriv_2016.8-1.1 metadat_1.2-0       Matrix_1.7-0       \n[7] dplyr_1.1.4        \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      jsonlite_1.8.9    compiler_4.4.1    tidyselect_1.2.1 \n [5] scales_1.3.0      yaml_2.3.10       fastmap_1.2.0     lattice_0.22-6   \n [9] R6_2.5.1          labeling_0.4.3    generics_0.1.3    knitr_1.48       \n[13] htmlwidgets_1.6.4 tibble_3.2.1      rprojroot_2.0.4   munsell_0.5.1    \n[17] pillar_1.9.0      rlang_1.1.4       utf8_1.2.4        mathjaxr_1.6-0   \n[21] xfun_0.48         cli_3.6.3         withr_3.0.2       magrittr_2.0.3   \n[25] digest_0.6.37     grid_4.4.1        lifecycle_1.0.4   nlme_3.1-164     \n[29] vctrs_0.6.5       evaluate_1.0.1    glue_1.8.0        farver_2.1.2     \n[33] fansi_1.0.6       colorspace_2.1-1  rmarkdown_2.27    tools_4.4.1      \n[37] pkgconfig_2.0.3   htmltools_0.5.8.1\n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}