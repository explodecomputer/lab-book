{
  "hash": "31e4b1bf891f7914d84ce081a5bd21bc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Differences in cancer prevalence and heritability\"\nauthor: Gibran Hemani\ndate: \"2024-02-21\"\ncategories: []\n---\n\n\n## Background\n\n[Richard Peto points out, and later George Davey Smith](https://link.springer.com/article/10.1007/s10654-023-01090-5#Sec3), that cancer prevalence is very different across geographical regions and across time periods within geographical regions. Such systematic differences are too rapid to be explained by genetic factors, and too structured to be explained by chance. When comparing the rates of cancer between the highest 20% and lowest 20% prevalence, they suggest that ~80% of cancer is due to modifiable risk factors. Similar rates for mortality differences, meaning that it's plausible that this isn't due to differential rates of cancer detection.\n\nHow does this square with heritability? It implies that 80% of the variance in cancer is due to a set of modifiable factors. But if h2 is higher than 20% then is this possible?\n\nConsider smoking and lung cancer. If smoking is partially genetic and partially environmental, what happens in this high vs low prevalence calculation?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(ggplot2)\n```\n:::\n\n\nPositive control, lets make it so that 80% of the trait is due to environment and 20% random chance\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 10000\n\ndat <- bind_rows(\n    tibble(\n        envir = rbinom(n, 1, 0) * 10,\n        cancer = rbinom(n, 1, plogis(-1.9 + envir)),\n        cat=\"low\"\n    ),\n    tibble(\n        envir = rbinom(n, 1, 0.8) * 10,\n        cancer = rbinom(n, 1, plogis(-1.9 + envir)),\n        cat=\"high\"\n    )\n) \n\ncor(dat$envir[dat$cat==\"high\"], dat$cancer[dat$cat==\"high\"])^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8200225\n```\n\n\n:::\n\n```{.r .cell-code}\ncor(dat$envir, dat$cancer)^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7139614\n```\n\n\n:::\n\n```{.r .cell-code}\ndat %>%\n    group_by(cat) %>%\n    summarise(prev_cancer = sum(cancer) / n(), mean_env = mean(envir))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  cat   prev_cancer mean_env\n  <chr>       <dbl>    <dbl>\n1 high        0.824     7.94\n2 low         0.135     0   \n```\n\n\n:::\n:::\n\n\nNow introduce genetic variance\n\nThere is a heritability of 50% which is independent of environmental effect\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- bind_rows(\n    tibble(\n        envir = rbinom(n, 1, 0) * 10,\n        g = rnorm(n),\n        cancer = rbinom(n, 1, plogis(-1.9 + envir + g*10)),\n        cat=\"low\"\n    ),\n    tibble(\n        envir = rbinom(n, 1, 0.8) * 10,\n        g = rnorm(n),\n        cancer = rbinom(n, 1, plogis(-1.9 + envir + g*10)),\n        cat=\"high\"\n    )\n) \ncor(dat$g[dat$cat==\"high\"], dat$cancer[dat$cat==\"high\"])^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4576331\n```\n\n\n:::\n\n```{.r .cell-code}\ndat %>%\n    group_by(cat) %>%\n    summarise(prev_cancer = sum(cancer) / n(), mean_env = mean(envir))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  cat   prev_cancer mean_env\n  <chr>       <dbl>    <dbl>\n1 high        0.714     8.03\n2 low         0.436     0   \n```\n\n\n:::\n:::\n\n\nThat raises the prevalence in the low group. Now lets make the genetic factor mediated through behaviour\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- bind_rows(\n    tibble(\n        g = rnorm(n),\n        e = rnorm(n, sd=1),\n        envir = rbinom(n, 1, plogis(g + e)) * 10,\n        cancer = rbinom(n, 1, plogis(-1.9 + envir)),\n        cat=\"low\"\n    ),\n    tibble(\n        g = rnorm(n),\n        e = rnorm(n, sd=10),\n        envir = rbinom(n, 1, plogis(g + e)) * 10,\n        cancer = rbinom(n, 1, plogis(-1.9 + envir)),\n        cat=\"high\"\n    )\n) \ncor(dat$g[dat$cat==\"high\"], dat$cancer[dat$cat==\"high\"])^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.002550874\n```\n\n\n:::\n\n```{.r .cell-code}\ndat %>%\n    group_by(cat) %>%\n    summarise(prev_cancer = sum(cancer) / n(), mean_env = mean(envir))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  cat   prev_cancer mean_env\n  <chr>       <dbl>    <dbl>\n1 high        0.571     5.04\n2 low         0.566     4.94\n```\n\n\n:::\n:::\n\n\nI think you need a G x E interaction. You might have a high liability to smoke but the availability of cigarettes is very low, so that genetic variance cannot manifest. How does that appear as a statistical model? It will be the genetic risk on outcome + environmental risk on outcome, multiplied by accessibility to the outcome\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- bind_rows(\n    tibble(\n        g = rbeta(n, 3, 1),\n        accessibility = rbinom(n, 1, 0.001),\n        envir = rbinom(n, 1, g * accessibility),\n        cancer = rbinom(n, 1, plogis(-1.9 + envir * 10)),\n        cat=\"low\"\n    ),\n    tibble(\n        g = rbeta(n, 3, 1),\n        accessibility = rbinom(n, 1, 0.999),\n        envir = rbinom(n, 1, g * accessibility),\n        cancer = rbinom(n, 1, plogis(-1.9 + envir * 10)),\n        cat=\"high\"\n    )\n) \ncor(dat$g[dat$cat==\"high\"], dat$cancer[dat$cat==\"high\"])^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1662182\n```\n\n\n:::\n\n```{.r .cell-code}\ncor(dat$g[dat$cat==\"low\"], dat$cancer[dat$cat==\"low\"])^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.929504e-05\n```\n\n\n:::\n\n```{.r .cell-code}\ndat %>%\n    group_by(cat) %>%\n    summarise(prev_cancer = sum(cancer) / n(), mean_env = mean(envir), mean_acc=mean(accessibility), mean_env_p = mean(plogis(envir)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  cat   prev_cancer mean_env mean_acc mean_env_p\n  <chr>       <dbl>    <dbl>    <dbl>      <dbl>\n1 high        0.779   0.749    0.999       0.673\n2 low         0.132   0.0003   0.0005      0.500\n```\n\n\n:::\n:::\n\n\nBut here the heritability is limited to the non-genetic variance.\n\n\n## Allow liability variance to change\n\n- Simulate twins\n- Estimate heritability in high and low prevalence groups\n- Estimate fraction of cases change\n\n15-30x more likely to get lung cancer if you smoke\n1.5% of non-smokers get lung cancer\n12% of smokers get lung cancer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 1000000\ndat <- bind_rows(\n    tibble(\n        g = rnorm(n, sd=1),\n        e = rnorm(n, sd=1),\n        smoking = 2,\n        liability = -4 + g + e + smoking,\n        cancer = rbinom(n, 1, plogis(liability)),\n        cat=\"high\"\n    ),\n    tibble(\n        g = rnorm(n, sd=1),\n        e = rnorm(n, sd=1),\n        smoking = 0,\n        liability = -4 + g + e + smoking,\n        cancer = rbinom(n, 1, plogis(liability)),\n        cat=\"low\"\n    ),\n)\n\ngroup_by(dat, cat) %>%\n    summarise(\n        prev_cancer = sum(cancer) / n(),\n        mean_g = mean(g),\n        mean_e = mean(e),\n        mean_smoking = mean(smoking),\n        mean_liability = mean(liability),\n        h2 = cor(g, liability)^2,\n        h2obs = cor(g, cancer)^2,\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 8\n  cat   prev_cancer    mean_g    mean_e mean_smoking mean_liability    h2  h2obs\n  <chr>       <dbl>     <dbl>     <dbl>        <dbl>          <dbl> <dbl>  <dbl>\n1 high       0.184  -0.00131  -0.000625            2          -2.00 0.499 0.0904\n2 low        0.0405  0.000666 -0.000439            0          -4.00 0.499 0.0311\n```\n\n\n:::\n\n```{.r .cell-code}\ncor(dat$cancer, dat$g)^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.05730214\n```\n\n\n:::\n\n```{.r .cell-code}\ncor(dat$smoking, dat$cancer)^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.05152482\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(dat, aes(x=liability)) +\ngeom_density(aes(fill=cat), alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nTwin model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_families <- function(af, nfam, beta) {\n\tnsnp <- length(af)\n\tdads <- matrix(0, nfam, nsnp)\n\tmums <- matrix(0, nfam, nsnp)\n\tsibs1 <- matrix(0, nfam, nsnp)\n\tsibs2 <- matrix(0, nfam, nsnp)\n    sibs3 <- matrix(0, nfam, nsnp)\n\tfor(i in 1:nsnp)\n\t{\n\t\tdad1 <- rbinom(nfam, 1, af[i]) + 1\n\t\tdad2 <- (rbinom(nfam, 1, af[i]) + 1) * -1\n\t\tmum1 <- rbinom(nfam, 1, af[i]) + 1\n\t\tmum2 <- (rbinom(nfam, 1, af[i]) + 1) * -1\n\n\t\tdadindex <- sample(c(TRUE, FALSE), nfam, replace=TRUE)\n\t\tdadh <- rep(NA, nfam)\n\t\tdadh[dadindex] <- dad1[dadindex]\n\t\tdadh[!dadindex] <- dad2[!dadindex]\n\n\t\tmumindex <- sample(c(TRUE, FALSE), nfam, replace=TRUE)\n\t\tmumh <- rep(NA, nfam)\n\t\tmumh[mumindex] <- mum1[mumindex]\n\t\tmumh[!mumindex] <- mum2[!mumindex]\n\n\t\tsib1 <- cbind(dadh, mumh)\n\n\t\tdadindex <- sample(c(TRUE, FALSE), nfam, replace=TRUE)\n\t\tdadh <- rep(NA, nfam)\n\t\tdadh[dadindex] <- dad1[dadindex]\n\t\tdadh[!dadindex] <- dad2[!dadindex]\n\n\t\tmumindex <- sample(c(TRUE, FALSE), nfam, replace=TRUE)\n\t\tmumh <- rep(NA, nfam)\n\t\tmumh[mumindex] <- mum1[mumindex]\n\t\tmumh[!mumindex] <- mum2[!mumindex]\n\n\t\tsib2 <- cbind(dadh, mumh)\n\n\t\tsibs1[,i] <- rowSums(abs(sib1) - 1)\n\t\tsibs2[,i] <- rowSums(abs(sib2) - 1)\n\t}\n\n    sdat <- bind_rows(\n        tibble(fid = 1:nfam, iid = paste0(1:nfam, \"a\"), prs = drop(sibs1 %*% beta)),\n        tibble(fid = 1:nfam, iid = paste0(1:nfam, \"b\"), prs = drop(sibs2 %*% beta))\n    )\n    return(sdat)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_twins <- function(nmz, ndz, nsnp, bsd) {\n    af <- runif(nsnp, 0.01, 0.99)\n    b <- rnorm(nsnp, sd=bsd)\n    g <- sapply(af, function(x) rbinom(nmz, 2, x))\n    prs <- drop(g %*% b)\n    dim(g)\n    mz <- tibble(\n        fid = c(1:nmz, 1:nmz),\n        iid = c(paste0(1:nmz, \"a\"), paste0(1:nmz, \"b\")),\n        prs = c(prs, prs),\n        what = \"mz\"\n    )\n\n    dz <- make_families(af, ndz, b) %>% mutate(what=\"dz\")\n    bind_rows(mz, dz)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngx_to_gp <- function(gx, h2x, prev) {\n\tx_prime <- qnorm(prev, 0, 1, lower.tail=FALSE)\n\tp <- pnorm(x_prime, mean=gx, sd = 1 - sqrt(h2x), lower.tail=FALSE)\n\treturn(p)\n}\nrbinom(100000, 1, gx_to_gp(rnorm(100000), 0.5, 0.014)) %>% table %>% prop.table\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n.\n      0       1 \n0.98331 0.01669 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_twins2 <- function(nmz, ndz, prev, h2) {\n    mzg <- rnorm(nmz)\n    dzg <- mvtnorm::rmvnorm(ndz, sigma=matrix(c(1,0.5,0.5,1), 2, 2))\n    mz <- tibble(\n        fid = paste(c(1:nmz, 1:nmz), \"mz\", sep=\"_\"),\n        iid = c(paste0(1:nmz, \"a\"), paste0(1:nmz, \"b\")),\n        g = c(mzg, mzg),\n        what = \"mz\"\n    )\n    dz <- tibble(\n        fid = paste(c(1:ndz, 1:ndz), \"dz\", sep=\"_\"),\n        iid = c(paste0(1:ndz, \"a\"), paste0(1:ndz, \"b\")),\n        g = c(dzg[,1], dzg[,2]),\n        what = \"dz\"\n    )\n    d <- bind_rows(mz, dz) %>%\n        mutate(\n            p = gx_to_gp(g, h2, prev),\n            cancer = rbinom(n(), 1, p)\n        )\n    return(d)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_twin_h2 <- function(x) {\n    a <- subset(x, grepl(\"a\", iid))\n    b <- subset(x, grepl(\"b\", iid))\n    ab <- inner_join(a, b, by=c(\"fid\", \"what\"))\n    ab %>% group_by(what) %>%\n        summarise(\n            cor = cor(cancer.x, cancer.y)\n        ) %>% pivot_wider(names_from=what, values_from=cor) %>%\n        mutate(h2 = 0.5 * (mz - dz))\n}\n\nget_twin_h2_binary <- function(x) {\n    a <- subset(x, grepl(\"a\", iid))\n    b <- subset(x, grepl(\"b\", iid))\n    ab <- inner_join(a, b, by=c(\"fid\", \"what\"))\n    temp <- group_by(ab, what, cancer.x, cancer.y) %>% summarise(n=n()) %>% ungroup()\n    temp %>% group_by(what) %>%\n        mutate(\n            cl = paste(cancer.x, cancer.y),\n        ) %>%\n        summarise(\n            t = (n[cl==\"1 1\"] * n[cl==\"0 0\"] - n[cl==\"1 0\"] * n[cl == \"0 1\"]) / (n[cl==\"1 1\"] * n[cl==\"0 0\"] + n[cl==\"1 0\"] * n[cl == \"0 1\"])\n        ) %>% ungroup() %>%\n        summarise(h2 = 2 * (t[2]-t[1]))\n}\n\nget_twin_h2_falconer <- function(x) {\n    qg <- subset(x, grepl(\"a\", iid)) %>% summarise(prev = sum(cancer) / n()) %>% {.$prev}\n\n    xg <- qnorm(1 - qg)\n\n    fids_mz <- subset(x, what == \"mz\" & cancer == 1 & grepl(\"a\", iid))$fid\n    fids_dz <- subset(x, what == \"dz\" & cancer == 1 & grepl(\"a\", iid))$fid\n\n    x1 <- subset(x, (what == \"mz\" & fid %in% fids_mz) | (what == \"dz\" & fid %in% fids_dz))\n    p <- x1 %>% group_by(what, fid) %>%\n        summarise(c = sum(cancer)) %>%\n        group_by(what, c) %>%\n        summarise(n=n())\n    print(p)\n    \n    xr <- p %>% group_by(what) %>%\n        summarise(qr = n[2] / (n[2]+n[1]), xr = qnorm(1 - qr), N = sum(n))\n\n    zg <- dnorm(xg)\n    ag <- zg / qg\n    \n    xr <- xr %>% \n        mutate(\n            xg,\n            qg,\n            zg,\n            ag,\n            b = (xg - xr) / ag, \n            r = case_when(what==\"mz\" ~ 1, what == \"dz\" ~ 0.5, TRUE ~ NA), \n            h2 = b / r,\n            h2se = 1 / (b * ag^2) * sqrt((1-qr) / (qr * N))\n        )\n    xr\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntwins <- make_twins(100000, 100000, 100, 1)\ntwins\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 400,000 × 4\n     fid iid      prs what \n   <int> <chr>  <dbl> <chr>\n 1     1 1a    21.3   mz   \n 2     2 2a    11.0   mz   \n 3     3 3a     9.17  mz   \n 4     4 4a    12.5   mz   \n 5     5 5a     5.23  mz   \n 6     6 6a     4.72  mz   \n 7     7 7a    13.3   mz   \n 8     8 8a     9.81  mz   \n 9     9 9a    -0.181 mz   \n10    10 10a    9.09  mz   \n# ℹ 399,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\ntwins %>% group_by(what) %>% \n    summarise(mean_prs = mean(prs), sd_prs = sd(prs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  what  mean_prs sd_prs\n  <chr>    <dbl>  <dbl>\n1 dz        11.2   5.48\n2 mz        11.2   5.47\n```\n\n\n:::\n\n```{.r .cell-code}\ntwins %>% filter(what == \"mz\") %>%\n    mutate(sib = gsub(\"[0-9]\", \"\", iid)) %>%\n    select(fid, sib, g=prs) %>%\n    pivot_wider(values_from=g, names_from=sib) %>% {cov(.[,-1])}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         a        b\na 29.86894 29.86894\nb 29.86894 29.86894\n```\n\n\n:::\n\n```{.r .cell-code}\ntwins %>% filter(what == \"dz\") %>%\n    mutate(sib = gsub(\"[0-9]\", \"\", iid)) %>%\n    select(fid, sib, g=prs) %>%\n    pivot_wider(values_from=g, names_from=sib) %>% {cov(.[,-1])}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         a        b\na 29.94604 14.90168\nb 14.90168 30.03234\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(twins$prs[1:1000])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.49012\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntwdat <- make_twins(1000000, 1000000, 100, 0.3)\ntwins <- twdat %>%\n    rename(g=prs) %>%\n    mutate(\n        g = (g - mean(g))*2,\n        e = rnorm(n(), sd=sd(g[1:1000])),\n        cat = sample(0:1, n(), replace=TRUE),\n        smoking = cat * 3.5,\n        liability = -7 + g + e + smoking,\n        cancer = rbinom(n(), 1, plogis(liability))\n    )\n\ntwins\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4,000,000 × 9\n     fid iid        g what       e   cat smoking liability cancer\n   <int> <chr>  <dbl> <chr>  <dbl> <int>   <dbl>     <dbl>  <int>\n 1     1 1a    -0.120 mz    -2.55      0     0       -9.67      0\n 2     2 2a    -0.243 mz    -2.30      0     0       -9.54      0\n 3     3 3a    -1.74  mz    -3.37      1     3.5     -8.61      0\n 4     4 4a     4.76  mz     3.51      0     0        1.27      1\n 5     5 5a     4.30  mz    -5.00      0     0       -7.69      0\n 6     6 6a     0.219 mz    -3.85      1     3.5     -7.13      0\n 7     7 7a    -5.26  mz     3.62      0     0       -8.64      0\n 8     8 8a     1.59  mz     2.68      0     0       -2.74      0\n 9     9 9a     7.55  mz    -4.92      0     0       -4.38      0\n10    10 10a   -3.38  mz     0.762     0     0       -9.62      0\n# ℹ 3,999,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\ntwins %>% filter(grepl(\"a\", iid)) %>%\n    group_by(cat) %>%\n    summarise(prev = sum(cancer) / n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n    cat  prev\n  <int> <dbl>\n1     0 0.113\n2     1 0.272\n```\n\n\n:::\n\n```{.r .cell-code}\ngroup_by(twins, cat) %>%\n    summarise(\n        prev_cancer = sum(cancer) / n(),\n        mean_g = mean(g),\n        mean_e = mean(e),\n        mean_smoking = mean(smoking),\n        mean_liability = mean(liability),\n        h2 = cor(g, liability)^2,\n        h2obs = cor(g, cancer)^2\n    ) %>% str\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [2 × 8] (S3: tbl_df/tbl/data.frame)\n $ cat           : int [1:2] 0 1\n $ prev_cancer   : num [1:2] 0.114 0.273\n $ mean_g        : num [1:2] 0.000756 -0.000756\n $ mean_e        : num [1:2] 0.002363 0.000533\n $ mean_smoking  : num [1:2] 0 3.5\n $ mean_liability: num [1:2] -7 -3.5\n $ h2            : num [1:2] 0.492 0.492\n $ h2obs         : num [1:2] 0.162 0.247\n```\n\n\n:::\n\n```{.r .cell-code}\ngroup_by(twins, cat) %>%\n    do({\n        tibble(\n            h2twin = get_twin_h2(.)$h2,\n            h2twin2 = get_twin_h2_binary(.)$h2\n        )\n    })\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'what', 'cancer.x'. You can override using\nthe `.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `summarise()`.\nℹ In argument: `t = `/`(...)`.\nℹ In group 2: `what = \"mz\"`.\nCaused by warning in `n[cl == \"1 1\"] * n[cl == \"0 0\"] + n[cl == \"1 0\"] * n[cl == \"0 1\"]`:\n! NAs produced by integer overflow\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'what', 'cancer.x'. You can override using\nthe `.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There were 4 warnings in `summarise()`.\nThe first warning was:\nℹ In argument: `t = `/`(...)`.\nℹ In group 1: `what = \"dz\"`.\nCaused by warning in `n[cl == \"1 1\"] * n[cl == \"0 0\"]`:\n! NAs produced by integer overflow\nℹ Run `dplyr::last_dplyr_warnings()` to see the 3 remaining warnings.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n# Groups:   cat [2]\n    cat h2twin h2twin2\n  <int>  <dbl>   <dbl>\n1     0 0.0660      NA\n2     1 0.0710      NA\n```\n\n\n:::\n\n```{.r .cell-code}\nget_twin_h2_binary(twins)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'what', 'cancer.x'. You can override using\nthe `.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There were 8 warnings in `summarise()`.\nThe first warning was:\nℹ In argument: `t = `/`(...)`.\nℹ In group 1: `what = \"dz\"`.\nCaused by warning in `n[cl == \"1 1\"] * n[cl == \"0 0\"]`:\n! NAs produced by integer overflow\nℹ Run `dplyr::last_dplyr_warnings()` to see the 7 remaining warnings.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n     h2\n  <dbl>\n1    NA\n```\n\n\n:::\n\n```{.r .cell-code}\ntwins %>%\n    summarise(\n        prev_cancer = sum(cancer) / n(),\n        mean_g = mean(g),\n        mean_e = mean(e),\n        mean_smoking = mean(smoking),\n        mean_liability = mean(liability),\n        h2 = cor(g, liability)^2,\n        h2obs = cor(g, cancer)^2,\n        h2twin = get_twin_h2(.)$h2,\n        h2twin2 = get_twin_h2_binary(.)$h2,\n    ) %>% str\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'what', 'cancer.x'. You can override using\nthe `.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `summarise()`.\nℹ In argument: `t = `/`(...)`.\nCaused by warning:\n! There were 8 warnings in `summarise()`.\nThe first warning was:\nℹ In argument: `t = `/`(...)`.\nℹ In group 1: `what = \"dz\"`.\nCaused by warning in `n[cl == \"1 1\"] * n[cl == \"0 0\"]`:\n! NAs produced by integer overflow\nℹ Run `dplyr::last_dplyr_warnings()` to see the 7 remaining warnings.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [1 × 9] (S3: tbl_df/tbl/data.frame)\n $ prev_cancer   : num 0.193\n $ mean_g        : num 8.59e-16\n $ mean_e        : num 0.00145\n $ mean_smoking  : num 1.75\n $ mean_liability: num -5.25\n $ h2            : num 0.447\n $ h2obs         : num 0.196\n $ h2twin        : num 0.0613\n $ h2twin2       : num NA\n```\n\n\n:::\n\n```{.r .cell-code}\ngroup_by(twins, cat) %>%\n    do({\n        tibble(\n            h2twin = get_twin_h2(.)$h2,\n            h2twin2 = get_twin_h2_binary(.)$h2\n        )\n    })\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'what', 'cancer.x'. You can override using\nthe `.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `summarise()`.\nℹ In argument: `t = `/`(...)`.\nℹ In group 2: `what = \"mz\"`.\nCaused by warning in `n[cl == \"1 1\"] * n[cl == \"0 0\"] + n[cl == \"1 0\"] * n[cl == \"0 1\"]`:\n! NAs produced by integer overflow\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'what', 'cancer.x'. You can override using\nthe `.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There were 4 warnings in `summarise()`.\nThe first warning was:\nℹ In argument: `t = `/`(...)`.\nℹ In group 1: `what = \"dz\"`.\nCaused by warning in `n[cl == \"1 1\"] * n[cl == \"0 0\"]`:\n! NAs produced by integer overflow\nℹ Run `dplyr::last_dplyr_warnings()` to see the 3 remaining warnings.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n# Groups:   cat [2]\n    cat h2twin h2twin2\n  <int>  <dbl>   <dbl>\n1     0 0.0660      NA\n2     1 0.0710      NA\n```\n\n\n:::\n\n```{.r .cell-code}\ngroup_by(twins, cat) %>%\n    do({\n        print(.)\n        get_twin_h2_falconer(.)\n    }) %>% str\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,000,246 × 9\n     fid iid        g what       e   cat smoking liability cancer\n   <int> <chr>  <dbl> <chr>  <dbl> <int>   <dbl>     <dbl>  <int>\n 1     1 1a    -0.120 mz    -2.55      0       0     -9.67      0\n 2     2 2a    -0.243 mz    -2.30      0       0     -9.54      0\n 3     4 4a     4.76  mz     3.51      0       0      1.27      1\n 4     5 5a     4.30  mz    -5.00      0       0     -7.69      0\n 5     7 7a    -5.26  mz     3.62      0       0     -8.64      0\n 6     8 8a     1.59  mz     2.68      0       0     -2.74      0\n 7     9 9a     7.55  mz    -4.92      0       0     -4.38      0\n 8    10 10a   -3.38  mz     0.762     0       0     -9.62      0\n 9    11 11a   -2.60  mz     0.221     0       0     -9.38      0\n10    12 12a   -0.900 mz    -4.27      0       0    -12.2       0\n# ℹ 2,000,236 more rows\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'what'. You can override using the\n`.groups` argument.\n`summarise()` has grouped output by 'what'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n# Groups:   what [2]\n  what      c     n\n  <chr> <int> <int>\n1 dz        1 51362\n2 dz        2  5526\n3 mz        1 47773\n4 mz        2  8763\n# A tibble: 1,999,754 × 9\n     fid iid        g what       e   cat smoking liability cancer\n   <int> <chr>  <dbl> <chr>  <dbl> <int>   <dbl>     <dbl>  <int>\n 1     3 3a    -1.74  mz    -3.37      1     3.5    -8.61       0\n 2     6 6a     0.219 mz    -3.85      1     3.5    -7.13       0\n 3    13 13a    3.83  mz     0.956     1     3.5     1.29       0\n 4    17 17a    0.939 mz    -4.94      1     3.5    -7.50       0\n 5    18 18a    3.17  mz    -6.75      1     3.5    -7.08       0\n 6    22 22a    3.20  mz    -5.96      1     3.5    -6.26       0\n 7    24 24a   -0.115 mz     3.10      1     3.5    -0.516      0\n 8    29 29a    2.76  mz     4.90      1     3.5     4.17       1\n 9    30 30a   -0.282 mz     6.79      1     3.5     3.01       1\n10    33 33a   -0.960 mz     1.41      1     3.5    -3.05       0\n# ℹ 1,999,744 more rows\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'what'. You can override using the\n`.groups` argument.\n`summarise()` has grouped output by 'what'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n# Groups:   what [2]\n  what      c      n\n  <chr> <int>  <int>\n1 dz        1 110944\n2 dz        2  24796\n3 mz        1 104552\n4 mz        2  32143\ngropd_df [4 × 13] (S3: grouped_df/tbl_df/tbl/data.frame)\n $ cat : int [1:4] 0 0 1 1\n $ what: chr [1:4] \"dz\" \"mz\" \"dz\" \"mz\"\n $ qr  : num [1:4] 0.0971 0.155 0.1827 0.2351\n $ xr  : num [1:4] 1.298 1.015 0.905 0.722\n $ N   : int [1:4] 56888 56536 135740 136695\n $ xg  : num [1:4] 1.209 1.209 0.605 0.605\n $ qg  : num [1:4] 0.113 0.113 0.272 0.272\n $ zg  : num [1:4] 0.192 0.192 0.332 0.332\n $ ag  : num [1:4] 1.69 1.69 1.22 1.22\n $ b   : num [1:4] -0.0527 0.1141 -0.2461 -0.0958\n $ r   : num [1:4] 0.5 1 0.5 1\n $ h2  : num [1:4] -0.1055 0.1141 -0.4921 -0.0958\n $ h2se: num [1:4] -0.0844 0.03 -0.0157 -0.0343\n - attr(*, \"groups\")= tibble [2 × 2] (S3: tbl_df/tbl/data.frame)\n  ..$ cat  : int [1:2] 0 1\n  ..$ .rows: list<int> [1:2] \n  .. ..$ : int [1:2] 1 2\n  .. ..$ : int [1:2] 3 4\n  .. ..@ ptype: int(0) \n  ..- attr(*, \".drop\")= logi TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nget_twin_h2_falconer(twins) %>% str\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'what'. You can override using the\n`.groups` argument.\n`summarise()` has grouped output by 'what'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n# Groups:   what [2]\n  what      c      n\n  <chr> <int>  <int>\n1 dz        1 139109\n2 dz        2  53519\n3 mz        1 120469\n4 mz        2  72762\ntibble [2 × 12] (S3: tbl_df/tbl/data.frame)\n $ what: chr [1:2] \"dz\" \"mz\"\n $ qr  : num [1:2] 0.278 0.377\n $ xr  : num [1:2] 0.589 0.315\n $ N   : int [1:2] 192628 193231\n $ xg  : num [1:2] 0.867 0.867\n $ qg  : num [1:2] 0.193 0.193\n $ zg  : num [1:2] 0.274 0.274\n $ ag  : num [1:2] 1.42 1.42\n $ b   : num [1:2] 0.196 0.389\n $ r   : num [1:2] 0.5 1\n $ h2  : num [1:2] 0.391 0.389\n $ h2se: num [1:2] 0.00931 0.00373\n```\n\n\n:::\n\n```{.r .cell-code}\nget_twin_h2_falconer(twins %>% filter(cat == 1)) %>% str\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'what'. You can override using the\n`.groups` argument.\n`summarise()` has grouped output by 'what'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n# Groups:   what [2]\n  what      c      n\n  <chr> <int>  <int>\n1 dz        1 110944\n2 dz        2  24796\n3 mz        1 104552\n4 mz        2  32143\ntibble [2 × 12] (S3: tbl_df/tbl/data.frame)\n $ what: chr [1:2] \"dz\" \"mz\"\n $ qr  : num [1:2] 0.183 0.235\n $ xr  : num [1:2] 0.905 0.722\n $ N   : int [1:2] 135740 136695\n $ xg  : num [1:2] 0.605 0.605\n $ qg  : num [1:2] 0.272 0.272\n $ zg  : num [1:2] 0.332 0.332\n $ ag  : num [1:2] 1.22 1.22\n $ b   : num [1:2] -0.2461 -0.0958\n $ r   : num [1:2] 0.5 1\n $ h2  : num [1:2] -0.4921 -0.0958\n $ h2se: num [1:2] -0.0157 -0.0343\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntwins$fid <- paste(twins$fid, twins$what, sep=\"_\")\nkid <- twins %>% subset(cancer & !duplicated(fid)) %>% {.$fid}\ntwins_proband <- twins %>% filter(fid %in% kid) %>% arrange(desc(cancer)) %>% mutate(proband = !duplicated(fid)) \ntwins_proband %>% group_by(proband) %>% summarise(n=n(), nc=sum(cancer))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  proband      n     nc\n  <lgl>    <int>  <int>\n1 FALSE   385859 126281\n2 TRUE    385859 385859\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(twins$liability)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -5.248767\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(twins_proband$liability)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.02932395\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(twins_proband$liability[twins_proband$proband])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.570294\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(twins_proband$liability[!twins_proband$proband])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -2.628942\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(twins$cancer)/nrow(twins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1930982\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(twins_proband$cancer)/nrow(twins_proband)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.6636362\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(twins_proband$cancer[!twins_proband$proband])/sum(!twins_proband$proband)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3272724\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntw <- bind_rows(\n    make_twins2(100000, 100000, 0.005, 0.2) %>% mutate(cat = 0),\n    make_twins2(100000, 100000, 0.15, 0.2) %>% mutate(cat = 1)\n)\ntw %>% group_by(cat) %>%\n    filter(what == \"mz\" & !duplicated(fid)) %>%\n    summarise(\n        prev = sum(cancer) / n(),\n        mean_g = mean(g),\n        h2 = cor(g, cancer)^2\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n    cat   prev    mean_g     h2\n  <dbl>  <dbl>     <dbl>  <dbl>\n1     0 0.0119  0.00142  0.0618\n2     1 0.183  -0.000322 0.360 \n```\n\n\n:::\n\n```{.r .cell-code}\ntwins_proband %>% group_by(cat, proband) %>% \n    summarise(prev = sum(cancer)/n())\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'cat'. You can override using the `.groups`\nargument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n# Groups:   cat [2]\n    cat proband  prev\n  <int> <lgl>   <dbl>\n1     0 FALSE   0.217\n2     0 TRUE    1    \n3     1 FALSE   0.438\n4     1 TRUE    1    \n```\n\n\n:::\n\n```{.r .cell-code}\ntwins2 <- left_join(twins, twins_proband %>% select(fid, iid, proband), by=c(\"fid\", \"iid\")) %>%\n    mutate(proband = case_when(proband ~ \"proband\", !proband ~ \"relative\", is.na(proband) ~ \"pop\", TRUE ~ NA))\ntable(twins2$proband, twins2$cancer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          \n                 0       1\n  pop      2968029  260253\n  proband        0  385859\n  relative  259578  126281\n```\n\n\n:::\n\n```{.r .cell-code}\ntwins2 %>% group_by(cat, what) %>% \n    summarise(\n        qg = sum(cancer)/n(),\n        xg = qnorm(1 - qg),\n        qr = sum(cancer[proband==\"relative\"])/sum(proband==\"relative\"),\n        xr = qnorm(1 - qr),        \n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'cat'. You can override using the `.groups`\nargument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 6\n# Groups:   cat [2]\n    cat what     qg    xg    qr      xr\n  <int> <chr> <dbl> <dbl> <dbl>   <dbl>\n1     0 dz    0.114 1.21  0.178 0.922  \n2     0 mz    0.113 1.21  0.256 0.656  \n3     1 dz    0.272 0.607 0.378 0.311  \n4     1 mz    0.273 0.603 0.497 0.00705\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## Summary\n\nNot clear what model would allow heritability to be greater than the variance explained by environmental factors. \n\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.6\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ggplot2_3.4.2 tidyr_1.3.0   dplyr_1.1.4  \n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.5       cli_3.6.2         knitr_1.45        rlang_1.1.3      \n [5] xfun_0.42         purrr_1.0.2       generics_0.1.3    jsonlite_1.8.8   \n [9] labeling_0.4.2    glue_1.7.0        colorspace_2.1-0  htmltools_0.5.7  \n[13] scales_1.2.1      fansi_1.0.6       rmarkdown_2.26    grid_4.3.3       \n[17] munsell_0.5.0     evaluate_0.23     tibble_3.2.1      fastmap_1.1.1    \n[21] mvtnorm_1.2-2     yaml_2.3.8        lifecycle_1.0.4   compiler_4.3.3   \n[25] htmlwidgets_1.6.3 pkgconfig_2.0.3   farver_2.1.1      digest_0.6.34    \n[29] R6_2.5.1          tidyselect_1.2.0  utf8_1.2.4        pillar_1.9.0     \n[33] magrittr_2.0.3    withr_3.0.0       gtable_0.3.3      tools_4.3.3      \n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}