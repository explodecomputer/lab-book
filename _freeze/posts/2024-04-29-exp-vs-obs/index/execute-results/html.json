{
  "hash": "b439e264b878c4611a1634928cd352dc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Comparing expected vs observed\"\nauthor: Gibran Hemani\ndate: \"2024-04-29\"\ncategories: []\n---\n\n\n## Background\n\nIs binomial test appropriate?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(100)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n\n#' Simulate GWAS summary data discovery and replication\n#'\n#' @param n1 The number of individuals in the first sample.\n#' @param n2 The number of individuals in the second sample.\n#' @param nsnp The number of causal SNPs (Single Nucleotide Polymorphisms) to simulate.\n#' @param nflip The number of SNPs to set to have 0 effect in the second group.\n#' @param afshared A logical value indicating whether the allele frequencies should be shared between the two groups.\n#' @param bsd The standard deviation of the distribution of effect sizes.\n#'\n#' @return Data frame\nsim <- function(n1, n2, nsnp, nflip=1, afshared=FALSE, bsd=1) {\n    # different allele frequencies per study\n    af1 <- runif(nsnp, 0.01, 0.99)\n    if(afshared) {\n        af2 <- af1\n    } else {\n        af2 <- runif(nsnp, 0.01, 0.99)\n    }\n\n    # identifical effect sizes across studies\n    b1 <- rnorm(nsnp, sd=bsd)\n    b2 <- b1\n\n    # make one of the effects different\n    if(nflip > 0) {\n        b1[1:nflip] <- 0\n    }\n\n    # Assume variance of trait is the same across studies\n    se1 <- 1 / sqrt(2 * af1 * (1-af1) * n1)\n    se2 <- 1 / sqrt(2 * af2 * (1-af2) * n2)\n\n    dat <- tibble(\n        af1, af2, b1, b2, se1, se2,\n        bhat1 = rnorm(nsnp, b1, se1),\n        bhat2 = rnorm(nsnp, b2, se2),\n        pval1 = 2 * pnorm(-abs(bhat1/se1)),\n        pval2 = 2 * pnorm(-abs(bhat2/se2)),\n        r21 = b1^2 * af1 * (1-af1) * 2,\n        r22 = b2^2 * af2 * (1-af2) * 2,\n    )\n    return(dat)\n}\n\nprop_overlap <- function(b_disc, b_rep, se_disc, se_rep, alpha) {\n  p_sign <- pnorm(-abs(b_disc) / se_disc) * pnorm(-abs(b_disc) / se_rep) + ((1 - pnorm(-abs(b_disc) / se_disc)) * (1 - pnorm(-abs(b_disc) / se_rep)))\n  p_sig <- pnorm(-abs(b_disc) / se_rep + qnorm(alpha / 2)) + (1 - pnorm(-abs(b_disc) / se_rep - qnorm(alpha / 2)))\n  p_rep <- pnorm(abs(b_rep) / se_rep, lower.tail = FALSE)\n  res <- tibble::tibble(\n    nsnp = length(b_disc),\n    metric = c(\"Sign\", \"Sign\", \"P-value\", \"P-value\"),\n    datum = c(\"Expected\", \"Observed\", \"Expected\", \"Observed\"),\n    value = c(sum(p_sign, na.rm = TRUE), sum(sign(b_disc) == sign(b_rep)), sum(p_sig, na.rm = TRUE), sum(p_rep < alpha, na.rm = TRUE))\n  ) %>%\n    dplyr::group_by(metric) %>%\n      dplyr::do({\n        x <- .\n        if(.$nsnp[1] > 0) {\n          bt <- binom.test(\n            x=.$value[.$datum == \"Observed\"], \n            n=.$nsnp[1], \n            p=.$value[.$datum == \"Expected\"] / .$nsnp[1]\n          )$p.value\n          x$pdiff <- bt\n        }\n        x\n      })\n  return(list(res = res, variants = dplyr::tibble(sig = p_sig, sign = p_sign)))\n}\n\nsim_test <- function(res, nboot=1000) {\n    res$res$pdiff_sim <- 0\n    res$res$pdiff_sim_np <- 0\n    bootsig <- sapply(1:nboot, \\(i) {\n        rbinom(nrow(res$variants), 1, res$variants$sig) %>% sum\n    })\n    res$res$pdiff_sim[1:2] <- pnorm(res$res$value[2], mean=mean(bootsig), sd=sd(bootsig), lower.tail=FALSE)\n    res$res$pdiff_sim_np[1:2] <- sum(res$res$value[2] < bootsig) / nboot\n    bootsign <- sapply(1:nboot, \\(i) {\n        rbinom(nrow(res$variants), 1, res$variants$sign) %>% sum\n    })\n    res$res$pdiff_sim[3:4] <- pnorm(res$res$value[4], mean=mean(bootsign), sd=sd(bootsign), lower.tail=TRUE)\n    res$res$pdiff_sim_np[3:4] <- sum(res$res$value[4] > bootsign) / nboot\n    return(res)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ns <- sim(10000, 1000, 100, nflip=0)\np <- prop_overlap(s$b1, s$b2, s$se1, s$se2, 0.05)\np <- sim_test(p)\np\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$res\n# A tibble: 4 × 7\n# Groups:   metric [2]\n   nsnp metric  datum    value pdiff pdiff_sim pdiff_sim_np\n  <int> <chr>   <chr>    <dbl> <dbl>     <dbl>        <dbl>\n1   100 P-value Expected  86.4 0.559     0.112         0.08\n2   100 P-value Observed  89   0.559     0.112         0.08\n3   100 Sign    Expected  97.6 0.182     0.969         0.94\n4   100 Sign    Observed 100   0.182     0.969         0.94\n\n$variants\n# A tibble: 100 × 2\n     sig  sign\n   <dbl> <dbl>\n 1 1.00  1.00 \n 2 1     1    \n 3 0.996 1.00 \n 4 1     1    \n 5 1     1    \n 6 1.00  1    \n 7 1.00  1.00 \n 8 1.00  1.00 \n 9 1.00  1.00 \n10 0.669 0.992\n# ℹ 90 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nparam <- expand.grid(\n    n1 = c(10000),\n    n2 = c(1000, 10000),\n    nsnp = c(100),\n    nflip = c(rep(0, 10), 1:20),\n    afshared = c(FALSE),\n    nsim=1:100\n)\ndim(param)\n\nres <- lapply(1:nrow(param), \\(i) {\n    s <- sim(param$n1[i], param$n2[i], param$nsnp[i], nflip=param$nflip[i], afshared=param$afshared[i])\n    p <- prop_overlap(s$b1, s$b2, s$se1, s$se2, 0.05)\n    res <- sim_test(p)\n\n    pa <- bind_cols(param[i,], res$res %>% select(-nsnp))\n    return(pa)\n}) %>% bind_rows()\nhead(res)   \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"res.rdata\")\nres %>% \n    as_tibble() %>%\n    filter(datum == \"Observed\") %>%\n    tidyr::pivot_longer(cols=c(pdiff, pdiff_sim, pdiff_sim_np), names_to=\"type\", values_to=\"p\") %>%\n    group_by(nflip, afshared, metric, n1, n2, nsnp, type) %>%\n    summarise(n=n(), p = sum(p < 0.05)/n()) %>%\n    ggplot(aes(x=nflip, y=p, colour=type)) +\n        geom_point() +\n        geom_line() +\n        facet_grid(n2 ~ metric)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'nflip', 'afshared', 'metric', 'n1', 'n2',\n'nsnp'. You can override using the `.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nres %>% \n    as_tibble() %>%\n    filter(datum == \"Observed\") %>%\n    group_by(nflip, metric) %>%\n    summarise(n=n(), pdiff = sum(pdiff < 0.05)/n(), pdiff_sim = sum(pdiff_sim < 0.05)/n())\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'nflip'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 42 × 5\n# Groups:   nflip [21]\n   nflip metric      n  pdiff pdiff_sim\n   <dbl> <chr>   <int>  <dbl>     <dbl>\n 1     0 P-value  2000 0.0005     0.085\n 2     0 Sign     2000 0.0105     0    \n 3     1 P-value   200 0          0.35 \n 4     1 Sign      200 0          0    \n 5     2 P-value   200 0.005      0.78 \n 6     2 Sign      200 0          0    \n 7     3 P-value   200 0.025      0.96 \n 8     3 Sign      200 0          0.02 \n 9     4 P-value   200 0.2        0.975\n10     4 Sign      200 0          0.06 \n# ℹ 32 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nres %>% \n    as_tibble() %>%\n    filter(datum == \"Observed\") %>%\n    group_by(nflip, metric) %>%\n    summarise(n=n(), pdiff = sum(pdiff < 0.05)/n(), pdiff_sim = sum(pdiff_sim < 0.05)/n()) %>%\n    tidyr::pivot_longer(cols=c(pdiff, pdiff_sim), names_to=\"type\", values_to=\"p\") %>%\n    ggplot(aes(x=nflip, y=p, colour=type)) +\n        geom_point() +\n        facet_grid(. ~ metric)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'nflip'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nres %>%\n    as_tibble() %>%\n    filter(datum == \"Observed\" & nflip == 0) %>%\n    tidyr::pivot_longer(cols=c(pdiff, pdiff_sim, pdiff_sim_np), names_to=\"type\", values_to=\"p\") %>%\n    group_by(metric, type, n1, n2, nsnp) %>%\n    summarise(n=n(), p = sum(p < 0.05)/n()) %>%\n    ggplot(aes(x=type, y=p, colour=metric)) +\n        geom_point() +\n        facet_grid(n2 ~ .)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'metric', 'type', 'n1', 'n2'. You can\noverride using the `.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.0 (2024-04-24)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS Ventura 13.6\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ggplot2_3.5.1 dplyr_1.1.4  \n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.5       cli_3.6.2         knitr_1.46        rlang_1.1.3      \n [5] xfun_0.43         purrr_1.0.2       generics_0.1.3    jsonlite_1.8.8   \n [9] labeling_0.4.3    glue_1.7.0        colorspace_2.1-0  htmltools_0.5.8.1\n[13] scales_1.3.0      fansi_1.0.6       rmarkdown_2.26    grid_4.4.0       \n[17] munsell_0.5.1     evaluate_0.23     tibble_3.2.1      fastmap_1.1.1    \n[21] yaml_2.3.8        lifecycle_1.0.4   compiler_4.4.0    htmlwidgets_1.6.4\n[25] pkgconfig_2.0.3   tidyr_1.3.1       farver_2.1.1      digest_0.6.35    \n[29] R6_2.5.1          tidyselect_1.2.1  utf8_1.2.4        pillar_1.9.0     \n[33] magrittr_2.0.3    withr_3.0.0       tools_4.4.0       gtable_0.3.5     \n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}