{
  "hash": "246ab34456c8805d71da5d19cdce1cb3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Clustering traits\"\nauthor: Gibran Hemani\ndate: \"2024-09-22\"\ncategories: []\nexecute:\n    eval: false\n---\n\n\n## Background\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ieugwasr)\nlibrary(dplyr)\nlibrary(data.table)\nlibrary(lsa)\n\nget_clusts <- function(cs, th) {\n    l <- list()\n    m <- apply(cs, 1, \\(x) sum(x > th))\n    o <- order(m[m > 1])\n    if(length(o) == 0) return(tibble(index = 1:nrow(cs), matches = 1:nrow(cs)))\n    for(i in o) {\n        x <- which(cs[i,] > th)\n        if(length(x) > 0) {\n            l[[i]] <- tibble(index = i, matches = x)\n            cs[x, x] <- 0\n        }\n        if(all(cs == 0)) break\n    }\n    l <- bind_rows(l)\n    stopifnot(length(l$matches) == length(unique(l$matches)))\n    return(l)\n}\n\nspecial_characters <- function(x) {\n    sc <- c(\"\\\\[\", \"\\\\]\", \"+\", \"-\", \":\", \"[0-9]\")\n    sapply(sc, \\(y) {\n        grepl(y, x)\n    }) %>% {sum(.) > 2}\n}\n\nrun_with_retry <- function(x, ntries=3) {\n    result <- NULL\n    url <- paste0(\"http://vectology-api.mrcieu.ac.uk/encodeText?qtext=\", URLencode(x))\n    for (i in 1:ntries) {\n        result <- try(httr::content(httr::POST(url, encode=\"json\")) %>% unlist() %>% {.[-1]} %>% as.numeric())\n        if (!inherits(result, \"try-error\")) {\n            break\n        } else {\n            result <- NULL\n        }\n    }\n    return(result)\n}\n\ncluster_traits <- function(d) {\n    if(nrow(d) == 1) {\n        d$index_id <- d$id\n        return(d)\n    }\n\n    tr <- d$trait\n\n    # Identify technical trait names e.g. metabolites, genes etc\n    sc <- sapply(tr, special_characters)\n    dsc <- d[sc,]\n    dsc$index_id <- dsc$id\n    d <- subset(d, !sc)\n    if(nrow(d) == 0) {\n        NULL\n    } else if(nrow(d) == 1) {\n        d$index_id <- d$id\n    } else {\n        tr <- d$trait\n\n        # Use vectology to try to cluster traits\n        cs <- sapply(tr, run_with_retry) %>% lsa::cosine()\n        csc <- get_clusts(cs, 0.95)\n\n        # Create a new vector which is the index_id for the cluster (this can be updated later)\n        d$idn <- 1:nrow(d)\n        csc <- left_join(csc, d %>% select(idn, index_id=id), by=c(\"index\"=\"idn\")) %>% left_join(d %>% select(idn, match_id=id), by=c(\"matches\"=\"idn\"))\n\n        d <- left_join(d, csc %>% select(match_id, index_id), by=c(\"id\"=\"match_id\"))\n    }\n    d <- bind_rows(d, dsc)\n    d <- d %>% \n        ungroup() %>%\n        group_by(index_id) %>% \n        arrange(desc(ncase), desc(sample_size)) %>%\n        mutate(priority = as.numeric(row_number()==1), index_id2=first(id)) %>% \n        ungroup() %>%\n        mutate(index_id=index_id2) %>% select(-index_id2)\n\n    return(d)\n}\n\na <- gwasinfo()\n\nb <- subset(a, grepl(\"ebi-a\", id)) %>% filter(population==\"European\")\nb\n\ngcat <- fread(\"~/Downloads/gwas_catalog_v1.0.2.1-studies_r2024-03-11.tsv\")\n\ngcat$sa2 <- paste0(\"ebi-a-\", gcat$`STUDY ACCESSION`)\n\ntable(b$id %in% gcat$sa2)\n\nb <- left_join(b, select(gcat, sa2, MAPPED_TRAIT, MAPPED_TRAIT_URI, LINK), by=c(\"id\"=\"sa2\"))\ndim(b)\n\ntable(duplicated(b$MAPPED_TRAIT_URI))\n\ntable(table(b$MAPPED_TRAIT_URI))\n\nb %>% group_by(MAPPED_TRAIT, LINK) %>% summarise(n=dplyr::n()) %>% arrange(desc(n)) %>% filter(n != 1) %>% as.data.frame %>% write.csv(\"ebi-a-duplicates.csv\", row.names=FALSE)\n\n# Cluster traits by\n# - EFO term\n# - Trait name (fuzzy matching)\n# - Ancestry\n# - Sex\n# - Study type (note)\n\n\n\ncl <- b %>% group_by(MAPPED_TRAIT, sex, population, note) %>%\n    arrange(desc(ncase), desc(sample_size)) %>%\n    mutate(priority = as.numeric(row_number()==1)) %>%\n    select(priority, MAPPED_TRAIT, sex, population, note, trait, sample_size, ncase, ncontrol, everything())\n\ncl2 <- cl %>% group_split() %>% lapply(., \\(x) {\n    print(nrow(x))\n    cluster_traits(x)\n})\n\nd <- cl %>% group_split() %>% {.[[21]]}\n\nd %>% cluster_traits\n\n\n\n\nWhich of the following traits are synonymous with each other? Provide the result in json format, with each element being a list of synonymous traits.\n\n- hypertension \n- systolic blood pressure\n- high blood pressure\n- cigarettes per day \n- smoking heaviness \n- smoking initiation\n- Triglyceride levels \n- Triglycerides \n- Triglyceride levels (UKB data field 30870) \n- Triglycerides \n- Triglycerides \n- Triglyceride levels \n[\n  [\"Triglyceride levels\", \"Triglycerides\", \"Triglyceride levels (UKB data field 30870)\"]\n]\n\n\n\n\ncl <- b %>% group_by(MAPPED_TRAIT, sex, population, note) %>%\n    arrange(desc(ncase), desc(sample_size)) %>%\n    mutate(priority = as.numeric(row_number()==1)) %>%\n    select(priority, MAPPED_TRAIT, sex, population, note, trait, sample_size, ncase, ncontrol, everything())\n\n\ncl %>% write.csv(\"ebi-a-clustered.csv\", row.names=FALSE)\n\nhclust(cl)\n\ncl %>% glimpse\n\n %>%\n    arrange\n\n\n\n\n\n\n\n\n\n\n# The largest sample size\n# Most recent\n```\n:::\n\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}