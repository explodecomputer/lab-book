{
  "hash": "db9ab585ae59cf685fdbf37ce9ae432a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Checking MZ difference model\"\nauthor: Gibran Hemani\ndate: \"2024-02-27\"\ncategories: []\n---\n\n\n## Background\n\n\n- Check that mean effects can't influence MZ dif effects\n- That the MZ difference model works for binary traits\n\nSimulate data\n\n- `g1` = main effect on y\n- `g2` = GxE effect with no main effect on y, with an interaction with normally distributed `f` variable\n- `g3` = Effect on variance of y\n- `g4` = Null\n- `y` - continuous variable\n- `cc` - `y` converted to a binary variable\n- `cs` - `cc` scaled to have mean 0 and variance 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(tidyr)\n\nn <- 100000\ndat <- tibble(\n    fid = rep(1:(n/2), each=2), # family id\n    id = rep(1:2, n/2),\n    g1 = rbinom(n/2, 2, 0.4) %>% rep(., each=2),\n    g2 = rbinom(n/2, 2, 0.4) %>% rep(., each=2),\n    g3 = rbinom(n/2, 2, 0.4) %>% rep(., each=2),\n    g4 = rbinom(n/2, 2, 0.4) %>% rep(., each=2),\n    f = rnorm(n),\n    v = rnorm(n, 0, g3),\n    y = 10 + g1 + f + f * drop(scale(g2)) + v + rnorm(n),\n    yr = round(y),\n    cc = rbinom(n, 1, plogis(-2 + y)),\n    cs = drop(scale(cc))\n)\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 100,000 × 12\n     fid    id    g1    g2    g3    g4      f        v     y    yr    cc     cs\n   <int> <int> <int> <int> <int> <int>  <dbl>    <dbl> <dbl> <dbl> <int>  <dbl>\n 1     1     1     2     1     1     2  1.55  -0.443   16.4     16     1 0.0515\n 2     1     2     2     1     1     2  0.367  0.126   11.2     11     1 0.0515\n 3     2     1     0     1     1     0  1.29   0.379   14.3     14     1 0.0515\n 4     2     2     0     1     1     0 -0.291  2.96    11.1     11     1 0.0515\n 5     3     1     0     1     2     0 -0.891 -0.402    8.49     8     1 0.0515\n 6     3     2     0     1     2     0  0.313  0.823   11.3     11     1 0.0515\n 7     4     1     0     1     0     0  0.105  0       12.1     12     1 0.0515\n 8     4     2     0     1     0     0 -1.72   0        9.25     9     1 0.0515\n 9     5     1     0     0     1     2  0.911 -0.405    8.44     8     1 0.0515\n10     5     2     0     0     1     2  1.60   0.00454  8.86     9     1 0.0515\n# ℹ 99,990 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(dat$y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10.80035\n```\n\n\n:::\n\n```{.r .cell-code}\nvar(dat$y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.629854\n```\n\n\n:::\n:::\n\n\nCreate MZ data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat2 <- dat %>% \n    group_by(fid) %>% \n    summarise(\n        g1 = g1[1], \n        g2 = g2[1], \n        g3 = g3[1], \n        g4 = g4[1], \n        y2 = (y[1]+y[2])^2,\n        y = y[1]-y[2], \n        yrabs = abs(yr[1]-yr[2]), \n        yabs=abs(y), \n        cc=cc[1]-cc[2], \n        cm = mean(cc),\n        ccabs=abs(cc),\n        cs2=(cs[1]-cs[2])^2,\n        cs=cs[1]-cs[2], \n        csabs=abs(cs)\n    )\ndat2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50,000 × 15\n     fid    g1    g2    g3    g4    y2      y yrabs  yabs    cc    cm ccabs\n   <int> <int> <int> <int> <int> <dbl>  <dbl> <dbl> <dbl> <int> <dbl> <int>\n 1     1     2     1     1     2  758.  5.22      5 5.22      0     0     0\n 2     2     0     1     1     0  645.  3.23      3 3.23      0     0     0\n 3     3     0     1     2     0  392. -2.84      3 2.84      0     0     0\n 4     4     0     1     0     0  456.  2.84      3 2.84      0     0     0\n 5     5     0     0     1     2  299. -0.420     1 0.420     0     0     0\n 6     6     0     0     0     0  451. -0.714     1 0.714     0     0     0\n 7     7     0     1     1     1  537.  3.64      3 3.64      0     0     0\n 8     8     2     1     1     2  493.  4.73      4 4.73      0     0     0\n 9     9     0     1     1     1  560. -1.74      2 1.74      0     0     0\n10    10     0     0     1     0  414.  2.64      2 2.64      0     0     0\n# ℹ 49,990 more rows\n# ℹ 3 more variables: cs2 <dbl>, cs <dbl>, csabs <dbl>\n```\n\n\n:::\n:::\n\n\nThis creates the following potential dependent variables for the regression.\n\n- `y` which is the difference in `y` between the two MZ twins (as stated in the equation in the paper)\n- `yabs` which is the absolute difference in `y` between the two MZ twins\n- `cc` which is the difference in `cc` between the two MZ twins\n- `ccabs` which is the absolute difference in `cc` between the two MZ twins\n- `cs` which is the difference in the scaled binary variable between the two MZ twins\n- `cs2` which is the squared difference in the scaled binary variable between the two MZ twins\n\n`cm` is also generated - the mean of `cc` for the MZ twins. This is the covariate used in model 2 according to the methods in the paper.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreg <- function(f, dat, what) {\n    fo <- as.formula(f)\n    o <- lm(fo, data=dat) %>% summary() %>% \n        coef() %>% \n        as.data.frame() %>%\n        slice_tail(n=1) %>%\n        mutate(what=what, f=f)\n    rownames(o) <- NULL\n    names(o) <- c(\"est\", \"se\", \"t\", \"p\", \"what\", \"f\")\n    o %>% select(what, f, est, se, p)\n}\n\no <- bind_rows(\n    reg(\"cc ~ g1\", dat, \"pop\"),\n    reg(\"cc ~ g2\", dat, \"pop\"),\n    reg(\"cc ~ g3\", dat, \"pop\"),\n    reg(\"cc ~ g4\", dat, \"pop\"),\n    reg(\"y ~ g1\", dat2, \"mz\"),\n    reg(\"y ~ g2\", dat2, \"mz\"),\n    reg(\"y ~ g3\", dat2, \"mz\"),\n    reg(\"y ~ g4\", dat2, \"mz\"),\n    reg(\"yabs ~ g1\", dat2, \"mz\"),\n    reg(\"yabs ~ g2\", dat2, \"mz\"),\n    reg(\"yabs ~ g3\", dat2, \"mz\"),\n    reg(\"yabs ~ g4\", dat2, \"mz\"),\n    reg(\"yrabs ~ g1\", dat2, \"mz\"),\n    reg(\"yrabs ~ g2\", dat2, \"mz\"),\n    reg(\"yrabs ~ g3\", dat2, \"mz\"),\n    reg(\"yrabs ~ g4\", dat2, \"mz\"),\n    reg(\"yabs ~ g1 + cm\", dat2, \"mz\"),\n    reg(\"yabs ~ g2 + cm\", dat2, \"mz\"),\n    reg(\"yabs ~ g3 + cm\", dat2, \"mz\"),\n    reg(\"yabs ~ g4 + cm\", dat2, \"mz\"),\n    reg(\"cc ~ g1\", dat2, \"mz\"),\n    reg(\"cc ~ g2\", dat2, \"mz\"),\n    reg(\"cc ~ g3\", dat2, \"mz\"),\n    reg(\"cc ~ g4\", dat2, \"mz\"),\n    reg(\"ccabs ~ g1\", dat2, \"mz\"),\n    reg(\"ccabs ~ g2\", dat2, \"mz\"),\n    reg(\"ccabs ~ g3\", dat2, \"mz\"),\n    reg(\"ccabs ~ g4\", dat2, \"mz\"),\n    reg(\"cs ~ g1\", dat2, \"mz\"),\n    reg(\"cs ~ g2\", dat2, \"mz\"),\n    reg(\"cs ~ g3\", dat2, \"mz\"),\n    reg(\"cs ~ g4\", dat2, \"mz\"),\n    reg(\"csabs ~ g1\", dat2, \"mz\"),\n    reg(\"csabs ~ g2\", dat2, \"mz\"),\n    reg(\"csabs ~ g3\", dat2, \"mz\"),\n    reg(\"csabs ~ g4\", dat2, \"mz\"),\n    reg(\"cs2 ~ g1\", dat2, \"mz\"),\n    reg(\"cs2 ~ g2\", dat2, \"mz\"),\n    reg(\"cs2 ~ g3\", dat2, \"mz\"),\n    reg(\"cs2 ~ g4\", dat2, \"mz\"),\n    reg(\"ccabs ~ g1 + cm\", dat2, \"mz\"),\n    reg(\"ccabs ~ g2 + cm\", dat2, \"mz\"),\n    reg(\"ccabs ~ g3 + cm\", dat2, \"mz\"),\n    reg(\"ccabs ~ g4 + cm\", dat2, \"mz\")\n)\no %>% mutate(log10p=-log10(p)) %>% select(what, f, log10p)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   what               f     log10p\n1   pop         cc ~ g1 17.2747743\n2   pop         cc ~ g2 57.2566871\n3   pop         cc ~ g3 10.9891693\n4   pop         cc ~ g4  0.3140467\n5    mz          y ~ g1  0.3100363\n6    mz          y ~ g2  0.8081800\n7    mz          y ~ g3  0.2121713\n8    mz          y ~ g4  0.7146450\n9    mz       yabs ~ g1  0.1442053\n10   mz       yabs ~ g2        Inf\n11   mz       yabs ~ g3        Inf\n12   mz       yabs ~ g4  0.4825420\n13   mz      yrabs ~ g1  0.1554996\n14   mz      yrabs ~ g2        Inf\n15   mz      yrabs ~ g3        Inf\n16   mz      yrabs ~ g4  0.8210111\n17   mz  yabs ~ g1 + cm  0.5437250\n18   mz  yabs ~ g2 + cm  0.5233139\n19   mz  yabs ~ g3 + cm  0.4328067\n20   mz  yabs ~ g4 + cm  0.5493653\n21   mz         cc ~ g1  0.1846266\n22   mz         cc ~ g2  0.1032772\n23   mz         cc ~ g3  0.4853742\n24   mz         cc ~ g4  1.0552000\n25   mz      ccabs ~ g1 16.4912008\n26   mz      ccabs ~ g2 59.0999919\n27   mz      ccabs ~ g3 10.4275082\n28   mz      ccabs ~ g4  0.2597902\n29   mz         cs ~ g1  0.1846266\n30   mz         cs ~ g2  0.1032772\n31   mz         cs ~ g3  0.4853742\n32   mz         cs ~ g4  1.0552000\n33   mz      csabs ~ g1 16.4912008\n34   mz      csabs ~ g2 59.0999919\n35   mz      csabs ~ g3 10.4275082\n36   mz      csabs ~ g4  0.2597902\n37   mz        cs2 ~ g1 16.4912008\n38   mz        cs2 ~ g2 59.0999919\n39   mz        cs2 ~ g3 10.4275082\n40   mz        cs2 ~ g4  0.2597902\n41   mz ccabs ~ g1 + cm 36.8960428\n42   mz ccabs ~ g2 + cm 37.0215620\n43   mz ccabs ~ g3 + cm 36.8091556\n44   mz ccabs ~ g4 + cm 36.9677338\n```\n\n\n:::\n:::\n\n\nObservations\n\n- The MZ difference model does not work for the difference of `y`\n- The MZ difference model works for continuous traits as expected when using the **absolute** difference in the trait (`yabs`). i.e.\n    - The main effect does not associate with MZ dif\n    - The GxE effect does associate with MZ dif\n    - The variance effect does associate with MZ dif\n- The MZ difference model does not work for the difference of the binary trait `cc`\n- Using the absolute difference in the binary trait (`ccabs`)\n    - Picks up the GxE effect and the variance effect\n    - **But it also picks up the main effect which it is not supposed to do**\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreg2 <- function(f, dat, what) {\n    fo <- as.formula(f)\n    o <- glm(fo, data=dat, family=\"binomial\") %>% summary() %>% \n        coef() %>% \n        as.data.frame() %>%\n        slice_tail(n=1) %>%\n        mutate(what=what, f=f)\n    rownames(o) <- NULL\n    names(o) <- c(\"est\", \"se\", \"t\", \"p\", \"what\", \"f\")\n    o %>% select(what, f, est, se, p)\n}\no <- bind_rows(\n    reg2(\"ccabs ~ g1\", dat2, \"mz\"),\n    reg2(\"ccabs ~ g2\", dat2, \"mz\"),\n    reg2(\"ccabs ~ g3\", dat2, \"mz\"),\n    reg2(\"ccabs ~ g4\", dat2, \"mz\"),\n    reg2(\"ccabs ~ g1 + cm\", dat2, \"mz\"),\n    reg2(\"ccabs ~ g2 + cm\", dat2, \"mz\"),\n    reg2(\"ccabs ~ g3 + cm\", dat2, \"mz\"),\n    reg2(\"ccabs ~ g4 + cm\", dat2, \"mz\")\n)\no %>% select(what, f, p) %>% mutate(p=-log10(p))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  what               f          p\n1   mz      ccabs ~ g1 15.5448674\n2   mz      ccabs ~ g2 49.1431818\n3   mz      ccabs ~ g3 10.1598219\n4   mz      ccabs ~ g4  0.2597595\n5   mz ccabs ~ g1 + cm 25.0419829\n6   mz ccabs ~ g2 + cm 16.5004672\n7   mz ccabs ~ g3 + cm 26.2644940\n8   mz ccabs ~ g4 + cm 29.5233782\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(lm(y ~ f * g2, dat))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y ~ f * g2, data = dat)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-8.5041 -1.0189 -0.0054  1.0200  9.9971 \n\nCoefficients:\n             Estimate Std. Error  t value Pr(>|t|)    \n(Intercept) 10.792120   0.007755 1391.600   <2e-16 ***\nf           -0.153508   0.007702  -19.930   <2e-16 ***\ng2           0.006775   0.007323    0.925    0.355    \nf:g2         1.445652   0.007259  199.158   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.609 on 99996 degrees of freedom\nMultiple R-squared:  0.4406,\tAdjusted R-squared:  0.4405 \nF-statistic: 2.625e+04 on 3 and 99996 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code}\ntapply(dat$y, dat$g2, var)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        0         1         2 \n 2.634606  4.248730 10.238937 \n```\n\n\n:::\n\n```{.r .cell-code}\ntapply(dat$y, dat$g3, var)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       0        1        2 \n3.485533 4.539930 7.455329 \n```\n\n\n:::\n\n```{.r .cell-code}\ntapply(dat2$yabs, dat2$g2, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       0        1        2 \n1.575893 2.168476 3.507917 \n```\n\n\n:::\n\n```{.r .cell-code}\ntapply(dat2$yabs, dat2$g3, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       0        1        2 \n1.810245 2.189781 2.914333 \n```\n\n\n:::\n:::\n\n\n\n## Trait skewness\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 100000\ndat <- tibble(\n    fid = rep(1:(n/2), each=2), # family id\n    id = rep(1:2, n/2),\n    g1 = rbinom(n/2, 2, 0.4) %>% rep(., each=2),\n    g2 = rbinom(n/2, 2, 0.4) %>% rep(., each=2),\n    g3 = rbinom(n/2, 2, 0.4) %>% rep(., each=2),\n    g4 = rbinom(n/2, 2, 0.4) %>% rep(., each=2),\n    f = rnorm(n),\n    v = rnorm(n, 0, g3),\n    y = (10 + g1 + f + f * drop(scale(g2)) + v + rnorm(n))^1.2,\n    yr = round(y),\n    cc = rbinom(n, 1, plogis(-2 + y)),\n    cs = drop(scale(cc))\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in rbinom(n, 1, plogis(-2 + y)): NAs produced\n```\n\n\n:::\n\n```{.r .cell-code}\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 100,000 × 12\n     fid    id    g1    g2    g3    g4       f      v     y    yr    cc     cs\n   <int> <int> <int> <int> <int> <int>   <dbl>  <dbl> <dbl> <dbl> <int>  <dbl>\n 1     1     1     1     1     0     1  0.363   0      19.8    20     1 0.0247\n 2     1     2     1     1     0     1  1.50    0      19.8    20     1 0.0247\n 3     2     1     1     0     1     2 -1.75   -2.99   11.7    12     1 0.0247\n 4     2     2     1     0     1     2 -0.373  -2.33   14.7    15     1 0.0247\n 5     3     1     1     1     2     0 -0.782  -0.945  14.2    14     1 0.0247\n 6     3     2     1     1     2     0  0.786   0.380  18.4    18     1 0.0247\n 7     4     1     2     0     1     0  0.925  -0.726  21.2    21     1 0.0247\n 8     4     2     2     0     1     0 -0.0610 -0.495  20.1    20     1 0.0247\n 9     5     1     1     1     1     0  1.18    0.582  18.3    18     1 0.0247\n10     5     2     1     1     1     0 -0.268   0.853  21.0    21     1 0.0247\n# ℹ 99,990 more rows\n```\n\n\n:::\n:::\n\n\nCreate MZ data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat2 <- dat %>% \n    group_by(fid) %>% \n    summarise(\n        g1 = g1[1], \n        g2 = g2[1], \n        g3 = g3[1], \n        g4 = g4[1], \n        y2 = (y[1]+y[2])^2,\n        ym = mean(c(y[1], y[2])),\n        y = y[1]-y[2], \n        yrabs = abs(yr[1]-yr[2]), \n        yabs=abs(y), \n        cc=cc[1]-cc[2], \n        cm = mean(cc),\n        ccabs=abs(cc),\n        cs2=(cs[1]-cs[2])^2,\n        cs=cs[1]-cs[2], \n        csabs=abs(cs)\n    )\ndat2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50,000 × 16\n     fid    g1    g2    g3    g4    y2    ym       y yrabs   yabs    cc    cm\n   <int> <int> <int> <int> <int> <dbl> <dbl>   <dbl> <dbl>  <dbl> <int> <dbl>\n 1     1     1     1     0     1 1569.  19.8  0.0214     0 0.0214     0     0\n 2     2     1     0     1     2  699.  13.2 -2.93       3 2.93       0     0\n 3     3     1     1     2     0 1062.  16.3 -4.13       4 4.13       0     0\n 4     4     2     0     1     0 1706.  20.7  1.06       1 1.06       0     0\n 5     5     1     1     1     0 1539.  19.6 -2.71       3 2.71       0     0\n 6     6     0     2     1     1 1407.  18.8  4.94       5 4.94       0     0\n 7     7     1     0     0     1 1190.  17.3 -2.01       2 2.01       0     0\n 8     8     1     0     0     1 1251.  17.7 -1.55       1 1.55       0     0\n 9     9     0     0     1     1 1078.  16.4 -0.602      1 0.602      0     0\n10    10     2     2     1     1 2939.  27.1  1.17       1 1.17       0     0\n# ℹ 49,990 more rows\n# ℹ 4 more variables: ccabs <int>, cs2 <dbl>, cs <dbl>, csabs <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\no <- bind_rows(\n    reg(\"y ~ g1\", dat, \"pop\"),\n    reg(\"y ~ g2\", dat, \"pop\"),\n    reg(\"y ~ g3\", dat, \"pop\"),\n    reg(\"y ~ g4\", dat, \"pop\"),\n    reg(\"y ~ g1\", dat2, \"mz\"),\n    reg(\"y ~ g2\", dat2, \"mz\"),\n    reg(\"y ~ g3\", dat2, \"mz\"),\n    reg(\"y ~ g4\", dat2, \"mz\"),\n    reg(\"yabs ~ g1\", dat2, \"mz\"),\n    reg(\"yabs ~ g2\", dat2, \"mz\"),\n    reg(\"yabs ~ g3\", dat2, \"mz\"),\n    reg(\"yabs ~ g4\", dat2, \"mz\"),\n    reg(\"yrabs ~ g1\", dat2, \"mz\"),\n    reg(\"yrabs ~ g2\", dat2, \"mz\"),\n    reg(\"yrabs ~ g3\", dat2, \"mz\"),\n    reg(\"yrabs ~ g4\", dat2, \"mz\"),\n    reg(\"yabs ~ g1 + cm\", dat2, \"mz\"),\n    reg(\"yabs ~ g2 + cm\", dat2, \"mz\"),\n    reg(\"yabs ~ g3 + cm\", dat2, \"mz\"),\n    reg(\"yabs ~ g4 + cm\", dat2, \"mz\")\n)\no %>% mutate(log10p=-log10(p)) %>% select(what, f, log10p)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   what              f     log10p\n1   pop         y ~ g1        Inf\n2   pop         y ~ g2 2.44671037\n3   pop         y ~ g3 3.90724985\n4   pop         y ~ g4 0.29606699\n5    mz         y ~ g1 0.08322533\n6    mz         y ~ g2 0.13162987\n7    mz         y ~ g3 0.07244880\n8    mz         y ~ g4 0.19959080\n9    mz      yabs ~ g1 2.82370784\n10   mz      yabs ~ g2        Inf\n11   mz      yabs ~ g3        Inf\n12   mz      yabs ~ g4 0.08054570\n13   mz     yrabs ~ g1 2.80228703\n14   mz     yrabs ~ g2        Inf\n15   mz     yrabs ~ g3        Inf\n16   mz     yrabs ~ g4 0.10686095\n17   mz yabs ~ g1 + cm 3.75871309\n18   mz yabs ~ g2 + cm 3.38758782\n19   mz yabs ~ g3 + cm 4.31651544\n20   mz yabs ~ g4 + cm 3.75068702\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(dat2$ym, dat2$y, use=\"pair\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.0005741118\n```\n\n\n:::\n:::\n\n\n\nMake a Poisson model and then normalise\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninormal <- function(x) {\n    x <- x + rnorm(length(x), 0, 1e-10)\n    qnorm((rank(x, na.last = \"keep\") - 0.5) / sum(!is.na(x)))\n}\n\nn <- 100000\ndat <- tibble(\n    fid = rep(1:(n/2), each=2), # family id\n    id = rep(1:2, n/2),\n    g1 = rbinom(n/2, 2, 0.4) %>% rep(., each=2),\n    g2 = rbinom(n/2, 2, 0.4) %>% rep(., each=2),\n    g3 = rbinom(n/2, 2, 0.4) %>% rep(., each=2),\n    g4 = rbinom(n/2, 2, 0.4) %>% rep(., each=2),\n    f = rnorm(n),\n    e = rnorm(n),\n    v = rnorm(n, 0, g3 * 0.1),\n    y = drop(scale(g1) * 0.1 + f * 0.1 + f * drop(scale(g2)) * 0.1 + v + e),\n    l = drop(exp(scale(y) * 0.1)),\n    score = rpois(n, l),\n    score_norm = inormal(score),\n    l_norm = inormal(l)\n)\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 100,000 × 14\n     fid    id    g1    g2    g3    g4       f      e       v       y     l\n   <int> <int> <int> <int> <int> <int>   <dbl>  <dbl>   <dbl>   <dbl> <dbl>\n 1     1     1     2     1     1     0  0.476  -0.155 -0.0560  0.0236 1.00 \n 2     1     2     2     1     1     0 -0.545   0.591 -0.253   0.441  1.04 \n 3     2     1     0     1     2     1 -0.539   1.14   0.213   1.17   1.12 \n 4     2     2     0     1     2     1 -1.79    0.810  0.0542  0.517  1.05 \n 5     3     1     1     1     0     1 -0.0322  0.926  0       0.951  1.10 \n 6     3     2     1     1     0     1 -0.634  -1.39   0      -1.44   0.868\n 7     4     1     1     0     1     2 -0.916   1.43  -0.0631  1.41   1.15 \n 8     4     2     1     0     1     2  0.620   0.690  0.127   0.837  1.08 \n 9     5     1     0     1     1     2  0.131  -0.337  0.0989 -0.336  0.967\n10     5     2     0     1     1     2 -0.113   0.874 -0.0615  0.682  1.07 \n# ℹ 99,990 more rows\n# ℹ 3 more variables: score <int>, score_norm <dbl>, l_norm <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(dat$score)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\nhist(dat$score_norm)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(dat$score, dat$score_norm, use=\"pair\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9121883\n```\n\n\n:::\n\n```{.r .cell-code}\ncor(dat$score, dat$l)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.09660049\n```\n\n\n:::\n\n```{.r .cell-code}\ncor(dat$y, dat$l)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9975233\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(dat$y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.006094577\n```\n\n\n:::\n\n```{.r .cell-code}\nvar(dat$l)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.01015692\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(dat$l)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.005014\n```\n\n\n:::\n:::\n\n\nCreate MZ data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat2 <- dat %>% \n    group_by(fid) %>% \n    summarise(\n        g1 = g1[1], \n        g2 = g2[1], \n        g3 = g3[1], \n        g4 = g4[1], \n        y2 = (y[1]+y[2])^2,\n        y = y[1]-y[2], \n        l = abs(l[1]-l[2]), \n        l_norm = abs(l_norm[1]-l_norm[2]),\n        yabs = abs(y), \n        score = abs(score[1]-score[2]), \n        ms = mean(score_norm),\n        score_norm = abs(score_norm[1]-score_norm[2])\n    )\ndat2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50,000 × 13\n     fid    g1    g2    g3    g4      y2      y      l l_norm  yabs score\n   <int> <int> <int> <int> <int>   <dbl>  <dbl>  <dbl>  <dbl> <dbl> <int>\n 1     1     2     1     1     0  0.216  -0.417 0.0419  0.409 0.417     2\n 2     2     0     1     2     1  2.84    0.652 0.0695  0.628 0.652     1\n 3     3     1     1     0     1  0.239   2.39  0.230   2.34  2.39      0\n 4     4     1     0     1     2  5.03    0.569 0.0624  0.561 0.569     2\n 5     5     0     1     1     2  0.120  -1.02  0.102   0.998 1.02      1\n 6     6     0     1     1     0  0.229   1.28  0.129   1.25  1.28      2\n 7     7     1     1     1     1  0.297  -0.260 0.0262  0.257 0.260     1\n 8     8     1     1     1     1  1.19   -0.660 0.0683  0.640 0.660     2\n 9     9     0     1     1     0  0.0839 -0.709 0.0705  0.697 0.709     1\n10    10     0     0     0     0 11.3     2.45  0.204   2.42  2.45      1\n# ℹ 49,990 more rows\n# ℹ 2 more variables: ms <dbl>, score_norm <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(dat2$l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n```{.r .cell-code}\nhist(dat2$y, breaks=100)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-2.png){width=672}\n:::\n\n```{.r .cell-code}\nhist(dat2$score)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-3.png){width=672}\n:::\n\n```{.r .cell-code}\nhist(dat2$ms)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-4.png){width=672}\n:::\n\n```{.r .cell-code}\nhist(dat2$score_norm, breaks=100)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-5.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\no <- bind_rows(\n    reg(\"y ~ g1\", dat, \"pop\"),\n    reg(\"y ~ g2\", dat, \"pop\"),\n    reg(\"y ~ g3\", dat, \"pop\"),\n    reg(\"y ~ g4\", dat, \"pop\"),\n    reg(\"y ~ g1\", dat2, \"mz\"),\n    reg(\"y ~ g2\", dat2, \"mz\"),\n    reg(\"y ~ g3\", dat2, \"mz\"),\n    reg(\"y ~ g4\", dat2, \"mz\"),\n    reg(\"yabs ~ g1\", dat2, \"mz\"),\n    reg(\"yabs ~ g2\", dat2, \"mz\"),\n    reg(\"yabs ~ g3\", dat2, \"mz\"),\n    reg(\"yabs ~ g4\", dat2, \"mz\"),\n    reg(\"l ~ g1\", dat2, \"mz\"),\n    reg(\"l ~ g2\", dat2, \"mz\"),\n    reg(\"l ~ g3\", dat2, \"mz\"),\n    reg(\"l ~ g4\", dat2, \"mz\"),\n    reg(\"l_norm ~ g1\", dat2, \"mz\"),\n    reg(\"l_norm ~ g2\", dat2, \"mz\"),\n    reg(\"l_norm ~ g3\", dat2, \"mz\"),\n    reg(\"l_norm ~ g4\", dat2, \"mz\"),\n    reg(\"score ~ g1\", dat2, \"mz\"),\n    reg(\"score ~ g2\", dat2, \"mz\"),\n    reg(\"score ~ g3\", dat2, \"mz\"),\n    reg(\"score ~ g4\", dat2, \"mz\"),\n    reg(\"score_norm ~ g1\", dat2, \"mz\"),\n    reg(\"score_norm ~ g2\", dat2, \"mz\"),\n    reg(\"score_norm ~ g3\", dat2, \"mz\"),\n    reg(\"score_norm ~ g4\", dat2, \"mz\")\n)\no %>% mutate(log10p=-log10(p)) %>% select(what, f, log10p)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   what               f       log10p\n1   pop          y ~ g1 223.49845803\n2   pop          y ~ g2   0.34714511\n3   pop          y ~ g3   0.25819938\n4   pop          y ~ g4   0.64395220\n5    mz          y ~ g1   0.03632132\n6    mz          y ~ g2   0.38132042\n7    mz          y ~ g3   1.00079267\n8    mz          y ~ g4   0.68887829\n9    mz       yabs ~ g1   0.34922634\n10   mz       yabs ~ g2   1.53015386\n11   mz       yabs ~ g3   0.92366698\n12   mz       yabs ~ g4   0.27304613\n13   mz          l ~ g1   3.60869823\n14   mz          l ~ g2   1.67822720\n15   mz          l ~ g3   0.90363896\n16   mz          l ~ g4   0.33315183\n17   mz     l_norm ~ g1   0.30614450\n18   mz     l_norm ~ g2   1.54241162\n19   mz     l_norm ~ g3   0.93572455\n20   mz     l_norm ~ g4   0.26916190\n21   mz      score ~ g1   0.01469387\n22   mz      score ~ g2   0.45762861\n23   mz      score ~ g3   0.74625997\n24   mz      score ~ g4   0.02614553\n25   mz score_norm ~ g1   0.19612508\n26   mz score_norm ~ g2   0.75161526\n27   mz score_norm ~ g3   0.47842950\n28   mz score_norm ~ g4   0.30320457\n```\n\n\n:::\n:::\n\n\n\n## Run simulations with more replications\n\nThe general model\n\n- `y` is a continuous variable which relates to the underlying normal liability\n- `ysq` is the square of `y`, to introduce skewness\n- `ysq_norm` is the inverse rank transformed `ysq` to try to rescue the skewness\n- `l` is the exponentiated liability which will eventually give rise to the Poisson distributed variable\n- `l_norm` is the inverse rank transformed `l` to try to rescue the skewness\n- `score` is the Poisson distributed variable arising from the underlying normal liability. This aims to represent the depression / anxiety distributions\n- `score_norm` is the inverse rank transformed `score` to try to rescue the skewness. Note that small amounts of noise are introduced to avoid ties\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndgm <- function(n, b1, b2, b3, b4, bf, bf2) {\n    dat <- tibble(\n        fid = rep(1:(n/2), each=2), # family id\n        id = rep(1:2, n/2),\n        g1 = rbinom(n/2, 2, 0.4) %>% rep(., each=2),\n        g2 = rbinom(n/2, 2, 0.4) %>% rep(., each=2),\n        g3 = rbinom(n/2, 2, 0.4) %>% rep(., each=2),\n        g4 = rbinom(n/2, 2, 0.4) %>% rep(., each=2),\n        f = rnorm(n),\n        e = rnorm(n),\n        v = rnorm(n, 0, g3 * b3),\n        covar = rnorm(n, 0, 0.5),\n        y = drop(covar + scale(g1) * b1 + scale(g2) * b2 + f * bf + f * drop(scale(g2)) * bf2 + v + e + scale(g4) * b4),\n        ysq = y^2,\n        ysq_norm = inormal(ysq),\n        l = drop(exp(scale(y) * 0.1)),\n        l_norm = inormal(l),\n        score = rpois(n, l),\n        score_norm = inormal(score),\n        score_res = residuals(lm(y ~ covar)),\n        score_res_norm = inormal(score_res)\n    )\n\n    dat2 <- dat %>% \n        group_by(fid) %>% \n        summarise(\n            g1 = g1[1], \n            g2 = g2[1], \n            g3 = g3[1], \n            g4 = g4[1], \n            yraw = y[1]-y[2], \n            y = abs(yraw), \n            ysq = abs(ysq[1]+ysq[2]),\n            ysq_norm = abs(ysq_norm[1]+ysq_norm[2]),\n            l = abs(l[1]-l[2]), \n            l_norm = abs(l_norm[1]-l_norm[2]),\n            score = abs(score[1]-score[2]), \n            score_norm = abs(score_norm[1]-score_norm[2]),\n            score_res = abs(score_res[1]-score_res[2]),\n            score_res_norm = abs(score_res_norm[1]-score_res_norm[2])\n        )\n    return(list(dat=dat, dat2=dat2))\n}\n\nest <- function(out) {\n    dat <- out$dat\n    dat2 <- out$dat2\n    o <- bind_rows(\n        reg(\"y ~ g1\", dat, \"pop\"),\n        reg(\"y ~ g2\", dat, \"pop\"),\n        reg(\"y ~ g3\", dat, \"pop\"),\n        reg(\"y ~ g4\", dat, \"pop\"),\n        reg(\"yraw ~ g1\", dat2, \"mz\"),\n        reg(\"yraw ~ g2\", dat2, \"mz\"),\n        reg(\"yraw ~ g3\", dat2, \"mz\"),\n        reg(\"yraw ~ g4\", dat2, \"mz\"),\n        reg(\"y ~ g1\", dat2, \"mz\"),\n        reg(\"y ~ g2\", dat2, \"mz\"),\n        reg(\"y ~ g3\", dat2, \"mz\"),\n        reg(\"y ~ g4\", dat2, \"mz\"),\n        reg(\"ysq ~ g1\", dat2, \"mz\"),\n        reg(\"ysq ~ g2\", dat2, \"mz\"),\n        reg(\"ysq ~ g3\", dat2, \"mz\"),\n        reg(\"ysq ~ g4\", dat2, \"mz\"),\n        reg(\"ysq_norm ~ g1\", dat2, \"mz\"),\n        reg(\"ysq_norm ~ g2\", dat2, \"mz\"),\n        reg(\"ysq_norm ~ g3\", dat2, \"mz\"),\n        reg(\"ysq_norm ~ g4\", dat2, \"mz\"),\n        reg(\"l ~ g1\", dat2, \"mz\"),\n        reg(\"l ~ g2\", dat2, \"mz\"),\n        reg(\"l ~ g3\", dat2, \"mz\"),\n        reg(\"l ~ g4\", dat2, \"mz\"),\n        reg(\"l_norm ~ g1\", dat2, \"mz\"),\n        reg(\"l_norm ~ g2\", dat2, \"mz\"),\n        reg(\"l_norm ~ g3\", dat2, \"mz\"),\n        reg(\"l_norm ~ g4\", dat2, \"mz\"),\n        reg(\"score ~ g1\", dat2, \"mz\"),\n        reg(\"score ~ g2\", dat2, \"mz\"),\n        reg(\"score ~ g3\", dat2, \"mz\"),\n        reg(\"score ~ g4\", dat2, \"mz\"),\n        reg(\"score_norm ~ g1\", dat2, \"mz\"),\n        reg(\"score_norm ~ g2\", dat2, \"mz\"),\n        reg(\"score_norm ~ g3\", dat2, \"mz\"),\n        reg(\"score_norm ~ g4\", dat2, \"mz\"),\n        reg(\"score_res ~ g1\", dat2, \"mz\"),\n        reg(\"score_res ~ g2\", dat2, \"mz\"),\n        reg(\"score_res ~ g3\", dat2, \"mz\"),\n        reg(\"score_res ~ g4\", dat2, \"mz\"),\n        reg(\"score_res_norm ~ g1\", dat2, \"mz\"),\n        reg(\"score_res_norm ~ g2\", dat2, \"mz\"),\n        reg(\"score_res_norm ~ g3\", dat2, \"mz\"),\n        reg(\"score_res_norm ~ g4\", dat2, \"mz\")\n    )\n    return(o)\n}\n```\n:::\n\n\nRun the sims\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres <- lapply(1:100, \\(i) {\n    out <- dgm(10000, 0.3, 0, 0.3, 0, 0.3, 0.3)\n    est(out) %>% mutate(i=i)\n}) %>% bind_rows()\n```\n:::\n\n\nRe-label\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres <- res %>% separate(f, c(\"trait\", \"g\"), sep=\" ~ \", remove=FALSE)\nres$g[res$g == \"g1\"] <- \"Main\"\nres$g[res$g == \"g2\"] <- \"GxE\"\nres$g[res$g == \"g3\"] <- \"Var\"\nres$g[res$g == \"g4\"] <- \"Null\"\n\nres$trait[res$trait == \"yraw\"] <- \"yraw\"\nres$trait[res$trait == \"y\"] <- \"Normal liability\"\nres$trait[res$trait == \"ysq\"] <- \"Normal liability squared\"\nres$trait[res$trait == \"ysq_norm\"] <- \"Normal liability squared (INT)\"\nres$trait[res$trait == \"l\"] <- \"Exponentiated liability\"\nres$trait[res$trait == \"l_norm\"] <- \"Exponentiated liability (INT)\"\nres$trait[res$trait == \"score\"] <- \"Poisson of liability\"\nres$trait[res$trait == \"score_norm\"] <- \"Poisson of liability (INT)\"\nres$trait[res$trait == \"score_res\"] <- \"Residuals of Poisson\"\nres$trait[res$trait == \"score_res_norm\"] <- \"Residuals of Poisson (INT)\"\n```\n:::\n\n\nEvaluate performance of variance estimates on power and bias. Expect that `Main` and `Null` should be null in the MZ difference model, and `GxE` and `Var` should be non-null.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(res %>% filter(what ==\"mz\" & trait != \"yraw\") %>% group_by(trait) %>% mutate(est = est/max(est)), aes(x=g, y=est)) + \n    geom_boxplot(aes(fill=g)) +\n    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), legend.position=\"none\") +\n    scale_fill_brewer(palette=\"Set3\") +\n    geom_hline(yintercept=0, linetype=\"dashed\") +\n    facet_grid(. ~ trait, scale=\"free_y\", labeller = label_wrap_gen()) +\n    labs(y = \"Relative effect size\", x=\"\", fill=\"\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(file=\"mz_diff.pdf\", width=12, height=8)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(res %>% filter(what ==\"mz\" & trait != \"yraw\"), aes(x=trait, y=-log10(p))) + \n    geom_boxplot(aes(fill=g)) +\n    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +\n    scale_fill_brewer(palette=\"Set3\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nres %>% group_by(what, f, g, trait) %>% summarise(power = sum(p < 0.05)) %>%\n    ungroup %>%\n    {\n    ggplot(., aes(x=g, y=power)) + \n        geom_bar(stat=\"identity\", aes(fill=g), position=\"dodge\") +\n        theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +\n        scale_fill_brewer(palette=\"Set3\") +\n        facet_grid(. ~ trait)\n    }\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'what', 'f', 'g'. You can override using\nthe `.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n## Summary\n\n- Inverse rank transformation of most traits rescues the MZ difference model\n- Inverse rank transformation of the Poisson variable does not seem to work - it erases the variance effects and there is some bias remaining for the main effect\n\n\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.6\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8\n\ntime zone: Europe/London\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] tidyr_1.3.0   ggplot2_3.4.2 dplyr_1.1.4  \n\nloaded via a namespace (and not attached):\n [1] vctrs_0.6.5        cli_3.6.2          knitr_1.45         rlang_1.1.3       \n [5] xfun_0.42          purrr_1.0.2        generics_0.1.3     textshaping_0.3.7 \n [9] jsonlite_1.8.8     labeling_0.4.2     glue_1.7.0         colorspace_2.1-0  \n[13] htmltools_0.5.7    ragg_1.2.6         scales_1.2.1       fansi_1.0.6       \n[17] rmarkdown_2.26     grid_4.3.3         munsell_0.5.0      evaluate_0.23     \n[21] tibble_3.2.1       fastmap_1.1.1      yaml_2.3.8         lifecycle_1.0.4   \n[25] compiler_4.3.3     RColorBrewer_1.1-3 htmlwidgets_1.6.3  pkgconfig_2.0.3   \n[29] systemfonts_1.0.5  farver_2.1.1       digest_0.6.34      R6_2.5.1          \n[33] tidyselect_1.2.0   utf8_1.2.4         pillar_1.9.0       magrittr_2.0.3    \n[37] withr_3.0.0        tools_4.3.3        gtable_0.3.3      \n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}