{
  "hash": "22333f4d48492f3d6c43b9e1137f7c9c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"OpenGWAS meta data\"\nauthor: Gibran Hemani\ndate: \"2025-02-20\"\ncategories: [OpenGWAS]\n---\n\n\n## Setup\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ieugwasr)\nmeta = ieugwasr::gwasinfo() %>% tibble() %>% mutate(batch = batch_from_id(id))\n```\n:::\n\n\n\n## Consortium field\n\nCheck\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeta$consortium[meta$consortium == \"NA\"] <- NA\nsubset(meta, is.na(consortium)) %>% group_by(batch) %>% count()\n```\n:::\n\n\n- For ieu-a and ieu-b we can look at these manually\n- For all others it will be straightforward to update\n- Separate note - ieu-b-5114 trait name appears to be wrong\n\n\n## Ancestry\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeta$population[meta$population == \"NA\"] <- NA\nmeta %>% subset(is.na(population)) %>% group_by(batch) %>% count()\n```\n:::\n\n\n- These should be available for ebi-a\n\n\n## Sex\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeta$sex[meta$sex == \"NA\"] <- NA\nmeta %>% subset(is.na(sex)) %>% group_by(batch) %>% count()\n```\n:::\n\n\n- Need to investigate if EBI actually records sex systematically\n\n\n## Units\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeta$unit[meta$unit == \"NA\"] <- NA\ntable(is.na(meta$unit[meta$category!=\"binary\"]))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmeta %>% filter(is.na(unit) & category != \"binary\") %>%\n  group_by(batch) %>%\n  count()\n```\n:::\n\n\n- ubm-b, eqtl-a, met-d, prot-a, prot-b, prot-c, ubm-a, ubm-b should all be sd units (need to check)\n- ebi-a should be accessible from ebi gwas catalog but it might not be straightforward to parse e.g. see https://www.ebi.ac.uk/gwas/studies/GCST002783 as an example. It gives 'unit increase' and 'unit decrease' interchangeably. \n  - We have previously parsed this freeform text into standardised units for other datasets. Could revisit that method\n  - We could estimate the SD directly from the summary statistics quite easily e.g. for a set of variants regress $2p_j(1-p_j)b_j^2 \\sim R^2$ and the slope will be an estimate of the variance of the trait. \n- For the ieu-a and ieu-b traits we can get the units manually from the corresponding papers.\n- need to make units a mandatory field\n\n## Transformations\n\nWe currently don't collect this information. Making sure that we either record the standard deviation of the trait or automate estimation of it as above will go some way towards this, but other aspects of transformations such as adjusting for the mean (relative vs absolute scale) or adjusting for non-normality etc will be hard to do systematically\n\n## Trait type\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeta$category[meta$category == \"NA\"] <- NA\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmeta %>% subset(is.na(category)) %>% group_by(batch) %>% count()\n```\n:::\n\n\n- This is a manual mapping which we could look into automating. \n- For eqtl-a, ubm-a the category will be straightforward\n\n## Sample size\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(is.na(meta$sample_size))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmeta %>% group_by(batch) %>% summarise(sum(is.na(sample_size)))\n```\n:::\n\n\n- These will be retrievable, and it should be a mandatory field. \n- Just a note that sample sizes will be possible to be estimated directly from the metadata too e.g. with estimate of SD the sample size is approx $var(y) / 2p_j(1-p_j) \\sim \\sigma^2 N)$\n\n## Ontology\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeta$ontology[meta$ontology == \"NA\"] <- NA\nmeta %>% group_by(batch) %>% summarise(n=n(), prop=sum(is.na(ontology))/n())\n```\n:::\n\n\n- The ontologies will be available for all ebi traits\n- for molecular traits we can look into relevant ontologies that might be straightforward to map from trait names\n- For ieu-a, ieu-b, finn-b, bbj-a, ukb-* it is very challenging\n  - Currently working on finetuning a LMM to automate this process to EFO.\n\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}