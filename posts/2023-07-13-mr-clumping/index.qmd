---
title: "MR and imperfect clumping"
author: Gibran Hemani
date: "2023-07-13"
categories: []
---

## Background

4000 instruments for educational attainment using clumping r2 = 0.1, and se doubles when using r2 = 0.001.

That smaller standard error is either due to the R2 in the exposure being higher or the non-independence of effects artificially increasing precision, or a mixture of both.

So the question is the impact of the latter â€“ if we have some true correlation structure with realistic F stats at a specific locus, and then we try to clump at r2 = 0.001 vs 0.1, how many instruments do we retain (it should be 1) and if more than 1, what is that impact on the standard error


```{r}
library(dplyr)
library(simulateGP)
library(TwoSampleMR)
library(purrr)
library(furrr)
library(ggplot2)
```

Simulate causal snp g + another that is correlated with it

```{r}
n <- 100000
g <- correlated_binomial(n, p1=0.5, p2=0.5, rho=sqrt(0.1))
# x caused by just snp 1
x <- g[,1] * 0.5 + rnorm(n)
y <- x * 0.5 + rnorm(n)

# MR using both SNPs, treating as if they are independent
get_effs(x, y, g) %>% mr(method="mr_ivw") %>% str
```

```{r}
get_effs(x, y, g) %>% str
get_effs(x, y, g) %>% mr_singlesnp()
```


```{r}
# MR using just the causal SNP
get_effs(x, y, g[,1, drop=F]) %>% mr(method=c("mr_ivw", "mr_wald_ratio")) %>% str
```

There's hardly any difference in the SE here. Try over a range of scenarios

```{r}
param <- expand.grid(
    r2=seq(0, 1, by=0.02),
    bgx=seq(0,1, by=0.2),
    bxy=seq(0,1, by=0.2),
    n=100000
)
param$sim <- 1:nrow(param)
dim(param)

plan(multicore, workers=7)
res <- future_map(1:nrow(param), \(i){
    g <- correlated_binomial(param$n[i], p1=0.5, p2=0.5, rho=sqrt(param$r2[i]))
    # x caused by just snp 1
    x <- g[,1] * param$bgx[i] + rnorm(n)
    y <- x * param$bxy[i] + rnorm(n)

    bind_rows(
        get_effs(x, y, g) %>% {suppressMessages(mr(., method="mr_ivw"))},
        get_effs(x, y, g[,1, drop=F]) %>% {suppressMessages(mr(., method="mr_wald_ratio"))}
    ) %>% mutate(sim=param$sim[i]) %>% return()
}) %>% bind_rows %>% inner_join(param, ., by="sim")
```

Standard errors across all scenarios

```{r}
ggplot(res, aes(x=r2, y=se)) +
geom_point(aes(colour=as.factor(nsnp))) +
geom_line(aes(colour=as.factor(nsnp))) +
facet_grid(bgx ~ bxy, labeller=label_both, scale="free_y")
```

Bias across all scenarios:

```{r}
ggplot(res, aes(x=r2, y=b)) +
geom_point(aes(colour=as.factor(nsnp))) +
geom_line(aes(colour=as.factor(nsnp))) +
facet_grid(bgx ~ bxy, labeller=label_both)
```


Look at just one

```{r}
ggplot(res %>% filter(bgx == 0.2, bxy == 0.2), aes(x=r2, y=se)) +
geom_point(aes(colour=as.factor(nsnp))) +
geom_line(aes(colour=as.factor(nsnp))) +
facet_grid(bgx ~ bxy, labeller=label_both, scale="free_y")
```


How much does SE reduce if you increase the number of instruments

```{r}
n <- 100000
g <- correlated_binomial(n, p1=0.5, p2=0.5, rho=sqrt(0.1))
# x caused by just snp 1
x <- g %*% c(0.5, 0.5) + rnorm(n)
y <- x * 0.5 + rnorm(n)

# MR using both SNPs, treating as if they are independent
get_effs(x, y, g) %>% mr(method="mr_ivw") %>% str
```

```{r}
get_effs(x, y, g[,1, drop=F]) %>% mr(method=c("mr_ivw", "mr_wald_ratio")) %>% str
```





FDR

```{r}
param <- expand.grid(
    r2=c(seq(0, 0.2, by=0.01)),
    bgx=seq(0, 0.2, by=0.2),
    bxy=seq(0),
    n=10000,
    rep=1:1000
)
param$sim <- 1:nrow(param)
dim(param)

plan(multicore, workers=7)
res <- future_map(1:nrow(param), \(i){
    g <- correlated_binomial(param$n[i], p1=0.5, p2=0.5, rho=sqrt(param$r2[i]))
    # x caused by just snp 1
    x <- g[,1] * param$bgx[i] + rnorm(n)
    y <- x * param$bxy[i] + rnorm(n)

    bind_rows(
        get_effs(x, y, g) %>% {suppressMessages(mr(., method="mr_ivw"))},
        get_effs(x, y, g[,1, drop=F]) %>% {suppressMessages(mr(., method="mr_wald_ratio"))}
    ) %>% mutate(sim=param$sim[i]) %>% return()
}) %>% bind_rows %>% inner_join(param, ., by="sim")
```


```{r}
param <- expand.grid(
    r2=c(seq(0.3, 1, by=0.05)),
    bgx=seq(0, 0.2, by=0.2),
    bxy=seq(0),
    n=10000,
    rep=1:1000
)
param$sim <- 1:nrow(param)
dim(param)

plan(multicore, workers=7)
res2 <- future_map(1:nrow(param), \(i){
    g <- correlated_binomial(param$n[i], p1=0.5, p2=0.5, rho=sqrt(param$r2[i]))
    # x caused by just snp 1
    x <- g[,1] * param$bgx[i] + rnorm(n)
    y <- x * param$bxy[i] + rnorm(n)

    bind_rows(
        get_effs(x, y, g) %>% {suppressMessages(mr(., method="mr_ivw"))},
        get_effs(x, y, g[,1, drop=F]) %>% {suppressMessages(mr(., method="mr_wald_ratio"))}
    ) %>% mutate(sim=param$sim[i]) %>% return()
}) %>% bind_rows %>% inner_join(param, ., by="sim")


```





```{r}
res %>% group_by(r2, bxy, nsnp) %>% summarise(fdr=mean(pval < 0.05)) %>%
filter(bxy == 0) %>%
ggplot(., aes(x=r2, y=fdr)) +
geom_point(aes(colour=as.factor(nsnp))) +
geom_line(aes(colour=as.factor(nsnp))) +
facet_grid(. ~ bxy, labeller=label_both, scale="free_y")
```



## Multiple variants

```{r}
sim <- function(n, r2, bgx, bxy, ninst) {

    dat <- lapply(1:ninst, \(i) {
        g <- correlated_binomial(n, p1=0.5, p2=0.5, rho=sqrt(r2))
        x <- g[,1] * bgx + rnorm(n)
        y <- x * bxy + rnorm(n)
        e <- get_effs(x, y, g)
        e$inst <- 1:2
        return(e)
    }) %>% bind_rows()

    bind_rows(
        mr(dat, method=c("mr_wald_ratio", "mr_ivw")) %>% mutate(inst="Causal+Tagging"),
        mr(dat %>% filter(SNP == 1), method=c("mr_wald_ratio", "mr_ivw")) %>% mutate(inst="Causal")
    )
}

sim(100000, 0.5, 0.2, 0, 1)
```




```{r}
sim2 <- function(n, r2, bgx, bmx, bxy, p1, p2, rep=1, sim=1) {
    args <- c(as.list(environment())) %>% as_tibble()
    g <- tryCatch(correlated_binomial(n, p1=p1, p2=p2, rho=sqrt(r2)), error=function(e) return(NULL))
    if(is.null(g)) return(NULL)
    x <- g[,1] * bgx + g[,2] * bmx + rnorm(n)
    y <- x * bxy + rnorm(n)
    e <- get_effs(x, y, g)
    r <- bind_rows(
        mr(e %>% filter(SNP == 1), method=c("mr_wald_ratio", "mr_ivw")) %>% mutate(inst="Causal"),
        mr(e %>% filter(SNP == 2), method=c("mr_wald_ratio", "mr_ivw")) %>% mutate(inst="Tagging")
    )
    r <- bind_cols(r, args)
    r$cR <- sqrt(p1*(1-p1)/(p2*(1-p2))*r2)
    return(r)
}

sim2(100000, 0.5, 0.2, 0.1, 0, 0.5, 0.5)

param <- expand.grid(
    n=c(1000, 10000),
    bgx=c(0.2),
    bmx=c(0, 0.1),
    bxy=c(0, 0.2),
    r2=seq(0, 0.5, by=0.1),
    p1=c(0.1, 0.5),
    p2=c(0.1, 0.5),
    rep=1:10
)
param$sim <- 1:nrow(param)
r <- pmap(param, sim2) %>% bind_rows()

dim(r)
head(r)

r1 <- r %>% filter(inst=="Causal")
r2 <- r %>% filter(inst=="Tagging")
rw <- inner_join(r1, r2, by="sim")

str(rw)

plot(rw$se.x, rw$se.y)

ggplot(rw, aes(x=se.x, y=se.y)) +
geom_point(aes(colour=r2.x)) +
geom_abline(slope=1, intercept=0) +
geom_smooth(method=lm) +
ylim(0, 20) +
facet_grid(I(p1.x-p2.x) ~ bmx.x, labeller=label_both, scale="free_y")

```




```{r}
p1 <- 0.5
p2 <- 0.2
n <- 100000
bgx <- 0.05
bmx <- 0
bxy <- 0
r2 <- 0.1

g <- tryCatch(correlated_binomial(n, p1=p1, p2=p2, rho=sqrt(r2)), error=function(e) return(NULL))
x <- g[,1] * bgx + g[,2] * bmx + rnorm(n)
y <- x * bxy + rnorm(n)


e <- get_effs(x, y, g)
e %>% str

r <- bind_rows(
    mr(e %>% filter(SNP == 1), method=c("mr_wald_ratio", "mr_ivw")) %>% mutate(inst="Causal"),
    mr(e %>% filter(SNP == 2), method=c("mr_wald_ratio", "mr_ivw")) %>% mutate(inst="Tagging")
)

sqrt(var(x) / (n * var(g[,1])))
sqrt(var(y) / (n * var(g[,1])))

summary(lm(y ~ g[,1]))

sqrt(var(x) / (n * var(g[,2])))
sqrt(var(y) / (n * var(g[,2])))

mr(e[1,])

sqrt(var(y) / (n * var(g[,1]))) / e$beta.exposure[1]

mr(e[2,])

sqrt(var(y) / (n * var(g[,2]))) / e$beta.exposure[2]

sqrt(var(y) / (n * var(g[,2]))) / e$beta.exposure[2]

cR <- sd(g[,1])/sd(g[,2]) * cor(g[,1], g[,2])

sqrt(var(y) / (n * var(g[,2]))) / (e$beta.exposure[1] * cR)

e$se.outcome[2] / (sd(g[,1])/sd(g[,2]))

e$se.outcome[1] * (sd(g[,1])/sd(g[,2])) / (e$beta.exposure[1] * cR)

e$se.outcome[1] / (e$beta.exposure[1] * cor(g[,1], g[,2]))

mr(e[1,])$se / cor(g[,1], g[,2])

rw$se.yhat <- rw$se.x / sqrt(rw$r2.x)

plot(rw$se.yhat ~ rw$se.y)
ggplot(rw, aes(x=se.y, y=se.yhat)) +
geom_point() +
geom_abline(slope=1, intercept=0) +
scale_x_log10() +
scale_y_log10() +
facet_grid(bmx.x ~ bxy.x, labeller=label_both, scale="free_y") +
labs(x="Tagging SNP standard error", y="Expected tagging SNP standard error under the null")

ggsave("metric.png", width=8, height=8)

```


Simulations run on ieu-p1:

```{r, eval=FALSE}
library(dplyr)
library(simulateGP)
library(TwoSampleMR)
library(purrr)
library(furrr)
library(ggplot2)


param <- expand.grid(
    r2=seq(0, 0.2, by=0.01),
    bgx=seq(0, 0.2, by=0.2),
    bxy=seq(0),
    n=c(1000, 10000, 100000),
    rep=1:1000
)
param$sim <- 1:nrow(param)
dim(param)

plan(multicore, workers=40)
res <- future_map(1:nrow(param), \(i){
    g <- correlated_binomial(param$n[i], p1=0.5, p2=0.5, rho=sqrt(param$r2[i]))
    # x caused by just snp 1
    x <- g[,1] * param$bgx[i] + rnorm(param$n[i])
    y <- x * param$bxy[i] + rnorm(param$n[i])

    bind_rows(
        get_effs(x, y, g) %>% {suppressMessages(mr(., method="mr_ivw"))},
        get_effs(x, y, g[,1, drop=F]) %>% {suppressMessages(mr(., method="mr_wald_ratio"))}
    ) %>% mutate(sim=param$sim[i]) %>% return()
}, .progress=TRUE) %>% bind_rows %>% inner_join(param, ., by="sim")


param <- expand.grid(
    r2=c(seq(0.3, 1, by=0.05)),
    bgx=seq(0, 0.2, by=0.2),
    bxy=seq(0),
    n=c(1000, 10000, 100000),
    rep=1:1000
)
param$sim <- 1:nrow(param)
dim(param)

plan(multicore, workers=40)
res2 <- future_map(1:nrow(param), \(i){
    g <- correlated_binomial(param$n[i], p1=0.5, p2=0.5, rho=sqrt(param$r2[i]))
    # x caused by just snp 1
    x <- g[,1] * param$bgx[i] + rnorm(param$n[i])
    y <- x * param$bxy[i] + rnorm(param$n[i])

    bind_rows(
        get_effs(x, y, g) %>% {suppressMessages(mr(., method="mr_ivw"))},
        get_effs(x, y, g[,1, drop=F]) %>% {suppressMessages(mr(., method="mr_wald_ratio"))}
    ) %>% mutate(sim=param$sim[i]) %>% return()
}, .progress=TRUE) %>% bind_rows %>% inner_join(param, ., by="sim")

res <- bind_rows(res, res2)




res %>% group_by(r2, bxy, bgx, n, nsnp) %>% summarise(fdr=mean(pval < 0.05), nrep=n()) %>%
filter(bxy == 0) %>%
ggplot(., aes(x=r2, y=fdr)) +
geom_point(aes(colour=as.factor(nsnp))) +
geom_line(aes(colour=as.factor(nsnp))) + 
geom_hline(yintercept=0.05, linetype="dashed") +
facet_grid(n ~ bxy, labeller=label_both, scale="free_y")


res %>% group_by(r2, bxy, bgx, n, nsnp) %>% summarise(fdr=mean(pval < 0.05), nrep=n()) %>%
mutate(snps=ifelse(nsnp==1, "Causal", "Causal + Tagging")) %>%
filter(bxy == 0) %>%
ggplot(., aes(x=r2, y=fdr)) +
geom_point(aes(colour=as.factor(snps))) +
geom_smooth(aes(colour=as.factor(snps)), se=FALSE) + 
geom_hline(yintercept=0.05, linetype="dashed") +
facet_grid(n ~ bgx, labeller=label_both, scale="free_y") +
labs(x="LD (R-square) between causal and tagging variants", y="False discovery rate", colour="SNPs included")

ggsave("mr_fdr.png", width=10, height=10)
saveRDS(res, file="mr_fdr.rds")



sim <- function(n, r2, bgx, bxy, ninst, rep=1) {

    args <- list(n=n, r2=r2, bgx=bgx, bxy=bxy, ninst=ninst, rep=rep) %>% as_tibble()
    dat <- lapply(1:ninst, \(i) {
        g <- correlated_binomial(n, p1=0.5, p2=0.5, rho=sqrt(r2))
        x <- g[,1] * bgx + rnorm(n)
        y <- x * bxy + rnorm(n)
        e <- get_effs(x, y, g)
        e$inst <- 1:2
        return(e)
    }) %>% bind_rows()

    bind_rows(
        suppressMessages(mr(dat, method=c("mr_wald_ratio", "mr_ivw")) %>% mutate(inst="Causal+Tagging")),
        suppressMessages(mr(dat %>% filter(SNP == 1), method=c("mr_wald_ratio", "mr_ivw")) %>% mutate(inst="Causal"))
    ) %>% bind_cols(args) %>%
    return()
}


param <- expand.grid(
    r2=c(seq(0, 0.2, by=0.01), seq(0.3, 1, by=0.05)),
    bgx=seq(0, 0.2, by=0.2),
    bxy=0,
    n=c(1000, 10000, 100000),
    ninst=c(1, 20),
    rep=1:10000
)

sim(10000, 0.8, 0.1, 0, 20, 1)

dim(param)

plan(multicore, workers=150)

res <- future_pmap(param, sim, .progress=TRUE) %>% bind_rows

p <- res %>% group_by(r2, bxy, bgx, ninst, n, inst) %>% summarise(fdr=mean(pval < 0.05), nrep=n()) %>%
filter(bxy == 0) %>%
ggplot(., aes(x=r2, y=fdr)) +
geom_point(aes(colour=as.factor(inst), shape=as.factor(bgx))) +
geom_smooth(aes(colour=as.factor(inst), linetype=as.factor(bgx)), se=FALSE) + 
geom_hline(yintercept=0.05, linetype="dashed") +
facet_grid(n ~ ninst, labeller=label_both, scale="free_y") +
ylim(0, 0.17) +
labs(x="LD (R-square) between causal and tagging variants", y="False discovery rate", colour="SNPs included", shape="G effect on x", linetype="G effect on x")

ggsave(p, file="mr_fdr.png", width=10, height=10)
saveRDS(res, file="mr_fdr.rds")
```


## Accounting for LD

```{r}
generate_g <- function(n, ninst, r2, p1, p2) {
    lapply(1:ninst, \(i) {
        correlated_binomial(n, p1=p1[i], p2=p2[i], rho=sqrt(r2[i]))
    }) %>% do.call(cbind, .)
}

g <- generate_g(100000, 10, rep(0.5, 10), rep(0.4, 10), rep(0.1, 10))
ld <- cor(g)
heatmap(cor(g))

b <- rep(c(0.1, 0), 10)
x <- g %*% b + rnorm(100000)
y <- rnorm(100000)

get_effs(x, y, g) %>% mr(method="mr_ivw") %>% str
get_effs(x, y, g[, seq(1,20, by=2)]) %>% mr(method="mr_ivw") %>% str

```

```{r}
bhat <- get_effs(x, y, g)
wr <- bhat$beta.outcome / bhat$beta.exposure
wr_se <- bhat$se.outcome / bhat$beta.exposure
metafor::rma.uni(yi=wr, sei=wr_se, method="FE")

bhat %>% mr_singlesnp()

sigma <- diag(wr_se) %*% ld %*% diag(wr_se)
w <- solve(sigma) %*% rep(1, 20)
w <- w / sum(w)

t(w) %*% wr
sqrt(t(w) %*% sigma %*% w)

ivw_cor <- function(bgx, bgy, se_gy, rho) {
    stopifnot(length(bgx) == length(bgy))
    stopifnot(length(bgx) == nrow(rho))
    stopifnot(nrow(rho) == ncol(rho))
    stopifnot(length(bgx) == length(se_gy))
    stopifnot(all(diag(rho) == 1))
    wr <- bgy / bgx
    wr_se <- se_gy / bgx
    sigma <- diag(wr_se) %*% rho %*% diag(wr_se)
    w <- solve(sigma) %*% rep(1, length(bgx))
    w <- w / sum(w)
    res <- tibble(
        method = "ivw_cor",
        b = t(w) %*% wr |> drop(),
        se = sqrt(t(w) %*% sigma %*% w) |> drop(),
        pval = pnorm(abs(b) / se, lower.tail=FALSE),
        nsnp = length(bgx)
    )
    res2 <- tibble(
        method = "ivw",
        b = sum(wr / wr_se^2) / sum(1 / wr_se^2),
        se = 1 / sqrt(sum(1 / wr_se^2)),
        pval = pnorm(abs(b) / se, lower.tail=FALSE),
        nsnp = length(bgx)
    )
    return(bind_rows(res2, res))
}

ivw_cor(bhat$beta.exposure, bhat$beta.outcome, bhat$se.outcome, ld)

bhat1 %>% mr(method="mr_ivw")
bhat2 %>% mr(method="mr_ivw")
```


```{r}

generate_g <- function(n, ninst, r2, p1, p2) {
    lapply(1:ninst, \(i) {
        correlated_binomial(n, p1=p1[i], p2=p2[i], rho=sqrt(r2[i]))
    }) %>% do.call(cbind, .)
}

g <- generate_g(10000, 1500, rep(0.1, 1500), rep(0.5, 1500), rep(0.5, 1500))
ld <- cor(g)

b <- rep(c(0.1, 0), 1500)
x <- g %*% b + rnorm(10000)
y1 <- rnorm(10000)
y2 <- x * 0.2 + rnorm(10000)
bhat1 <- get_effs(x, y1, g)
bhat2 <- get_effs(x, y2, g)

res1 <- ivw_cor(bhat1$beta.exposure, bhat1$beta.outcome, bhat1$se.outcome, ld)
res2 <- ivw_cor(bhat2$beta.exposure, bhat2$beta.outcome, bhat2$se.outcome, ld)


bind_rows(
    res1, 
    bhat1[seq(1,3000,by=2),] %>% mr(method="mr_ivw") %>% mutate(method="ivw_ind") %>% dplyr::select(method, b, se, pval, nsnp)
)
bind_rows(
    res2,
    bhat2[seq(1,3000,by=2),] %>% mr(method="mr_ivw") %>% mutate(method="ivw_ind") %>% dplyr::select(method, b, se, pval, nsnp)
)
```

- If the correlated variants are truly NULL (i.e. they contribute nothing to genetic effects on X and are just tagging SNPs), the standard error with the ivw_cor estimate will be LARGER than the standard error after strict clumping (i.e. power will be worse than just strict clumping)
- If the correlated variants are capturing additional genetic effects, the standard error with the ivw_cor estimate will be SMALLER than the the standard error after strict clumping (i.e. power will be better).

```{r}


g <- generate_g(10000, 500, rep(0.1, 500), rep(0.5, 500), rep(0.5, 500))
ld <- cor(g)

b <- rep(c(0.1, 0.2), 500)
x <- g %*% b + rnorm(10000)
y1 <- rnorm(10000)
y2 <- x * 0.2 + rnorm(10000)
bhat1 <- get_effs(x, y1, g)
bhat2 <- get_effs(x, y2, g)

res1 <- ivw_cor(bhat1$beta.exposure, bhat1$beta.outcome, bhat1$se.outcome, ld)
res2 <- ivw_cor(bhat2$beta.exposure, bhat2$beta.outcome, bhat2$se.outcome, ld)
bind_rows(
    res1, 
    bhat1[seq(1,1000,by=2),] %>% mr(method="mr_ivw") %>% mutate(method="ivw_ind") %>% dplyr::select(method, b, se, pval, nsnp)
)
bind_rows(
    res2,
    bhat2[seq(1,1000,by=2),] %>% mr(method="mr_ivw") %>% mutate(method="ivw_ind") %>% dplyr::select(method, b, se, pval, nsnp)
)


```


```{r}
bhat <- get_effs(x, y, g)
generate_pcs <- princomp(ld)


Psi = ((abs(bhat$beta.exposure))/bhat$se.outcome) %o% ((abs(bhat$beta.exposure))/bhat$se.outcome) * ld

pcs <- eigen(Psi)

K <- which(cumsum(pcs$values^2) / sum(pcs$values^2) > 0.99)[1]
K

xcomp <- bhat$beta.exposure %*% pcs$vectors[,1:K] %>% drop()
ycomp <- bhat$beta.outcome %*% pcs$vectors[,1:K] %>% drop()
secomp <- bhat$se.outcome %*% pcs$vectors[,1:K] %>% drop()
Omega <- bhat$se.outcome %o% bhat$se.outcome * ld
pcOmega <- t(pcs$vectors[,1:K]) %*% Omega %*% pcs$vectors[,1:K]

summary(lm(ycomp ~ 0 + xcomp, weights=1/secomp^2))

wr <- ycomp / xcomp
wr_se <- secomp / xcomp



library(metafor)
rma.uni(yi=wr, sei=wr_se, method="FE")


wr_se <- diag(wr_se) %*% pcOmega %*% diag(wr_se)
sqrt(diag(wr_se))


se <- pcOmega %*% diag()

```



```{r}
sim <- function(n, r2, bgx, bxy, ninst, rep=1) {

    args <- list(n=n, r2=r2, bgx=bgx, bxy=bxy, ninst=ninst, rep=rep) %>% as_tibble()
    g <- 
    dat <- lapply(1:ninst, \(i) {
        g <- correlated_binomial(n, p1=0.5, p2=0.5, rho=sqrt(r2))
        x <- g[,1] * bgx + rnorm(n)
        y <- x * bxy + rnorm(n)
        e <- get_effs(x, y, g)
        e$inst <- 1:2
        return(e)
    }) %>% bind_rows()

    bind_rows(
        suppressMessages(mr(dat, method=c("mr_wald_ratio", "mr_ivw")) %>% mutate(inst="Causal+Tagging")),
        suppressMessages(mr(dat %>% filter(SNP == 1), method=c("mr_wald_ratio", "mr_ivw")) %>% mutate(inst="Causal"))
    ) %>% bind_cols(args) %>%
    return()
}


library(MASS)

reg_nonind <- function(x, y, rho, se_x=NULL, se_y=NULL, nboot=NULL)
{
  X <- cbind(rep(1, length(x)), x)
  rho_inv <- solve(rho)
  #beta <- solve(t(X) %*% rho_inv %*% X) %*% t(X) %*% rho_inv %*% y
  beta <- ginv(t(X)%*%rho_inv %*%X)%*%t(X)%*%rho_inv %*%y
  yhat <- X %*% beta
  yres <- as.numeric(y - yhat)
  se <- as.numeric((t(yres) %*% rho_inv %*% yres) / (length(x)-qr(X)$rank)) * solve(t(X) %*% rho_inv %*% X)
  se <- sqrt(diag(se))
  return(tibble(
    param=c("intercept", "slope"), beta=beta, se=se, pval=pnorm(abs(beta)/se, lower.tail=FALSE)
  ))
  
  # get standard error via parametric bootstrap
  # betaboot <- matrix(0, nboot, 2)
  # for(i in 1:nboot)
  # {
  #   X[,2] <- rnorm(length(x), mean=x, sd=se_x)
  #   Y <- rnorm(length(y), mean=y, sd=se_y)
  #   betaboot[i,] <- solve(t(X) %*% rho_inv %*% X) %*% t(X) %*% rho_inv %*% Y %>% as.numeric()
  # }
  # se_boot <- apply(betaboot, 2, sd)
}

reg_nonind(bhat$beta.exposure, bhat$beta.outcome, ld, bhat$se.expposure, bhat$se.outcome, 1000)




```



```{r}
?metafor::rma.uni
```



## Summary

- Relaxed r2 e.g. from 0 to 0.1 doesn't seem to have a huge impact on standard errors
- In the one SNP situation relaxed r2 has no impact on bias, and could only plausibly change things under substantial heterogeneity which correlates with overrepresentation.
- More realistic simulations would look at whether this changes when the p-value at the second locus is very large, and would also look at the probability of erroneously keeping multiple loci for a single causal variant
- Some instability in SEs when correlated SNPs used
- Increasing SNPs will reduce SE but need to know change in r2 to examine this properly

---

```{r}
sessionInfo()
```
